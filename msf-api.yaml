openapi: 3.0.0
info:
  title: Marvel Strike Force Api
  version: beta 0.2.1
  description: |-
    API for Marvel Strike Force

    This API is currently in *beta* release and may be changed or discontinued in whole or in part at any time with or without notice.

    Access to the API requires three headers to be specified:
    - The `x-api-key` header should be set to `17wMKJLRxy3pYDCKG5ciP7VSU45OVumB2biCzzgw`.
    - The `User-Agent` header should be set automatically by the browser or HTTP library. If you need to set it manually, you can set it to `APIClient/1.0 (Server)`.
    - The `authorization` header should be set to `Bearer <token>` where `<token>` is an OAuth2 token with sufficient scope for the route you are calling. The scope required for each Player route category is shown in parentheticals in the category headers below. Other routes may be called with any valid token, including player-agnostic ones from the client-credentials flow.

    For examples of using OAuth2 Tokens, see the `#api-faq` channel on the offical Marvel Strike Force Discord: https://discord.gg/marvelstrikeforce.

    To obtain OAuth2 client credentials for your application, visit the MSF Developer Portal: https://hub.marvelstrikeforce.com/developer.

    NOTE 1: Additional detailed documentation is available for many responses. Click any `{...}` in the models below to reveal the expanded documentation.

    NOTE 2: You can "TRY" `POST` routes below by clicking on "EXAMPLE" on the left side and editing the example.
  contact:
    email: msf-api@scopely.com
servers:
  - url: 'https://api.marvelstrikeforce.com'
    description: v1
paths:
  /game/v1/languages:
    get:
      summary: Languages
      tags:
        - Localization
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LanguageCode'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-languages
      description: Gets the supported language codes.
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
  /game/v1/events:
    get:
      summary: Events
      tags:
        - Events
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventInfo'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-events
      description: 'Gets information about scheduled, running, and past events.'
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/eventType'
        - $ref: '#/components/parameters/eventEventInfo'
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/quantityFormat'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
  '/game/v1/events/{eventId}':
    parameters:
      - schema:
          type: string
        name: eventId
        in: path
        required: true
        description: The id of the event for which information is requested.
    get:
      summary: Event
      tags:
        - Events
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EventInfo'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-events-eventId
      description: Gets information about an event.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/eventEventInfo'
        - schema:
            type: string
            enum:
              - none
              - full
            default: full
          in: query
          name: objRewards
          description: Specifies how much of the reward information to include about each objective.
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/quantityFormat'
  /player/v1/events:
    get:
      summary: Player Events
      tags:
        - Player (m3p.f.pr.act)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventInfo'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '474':
          $ref: '#/components/responses/474_BANNED'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-player-v1-events
      description: 'Gets information about scheduled, running, and past events that a player qualifies for, including the player''s progress on those events.'
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/eventType'
        - $ref: '#/components/parameters/eventEventInfo'
        - schema:
            type: string
            enum:
              - none
              - part
              - full
            default: part
          in: query
          name: objRewards
          description: Specifies how much of the reward information to include about each objective. `part` includes the information relevant to the player's current progress.
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/quantityFormat'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
  '/player/v1/events/{eventId}':
    parameters:
      - schema:
          type: string
        name: eventId
        in: path
        required: true
        description: The id of the event for which information is requested.
    get:
      summary: Player Event
      tags:
        - Player (m3p.f.pr.act)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EventInfo'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '474':
          $ref: '#/components/responses/474_BANNED'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-player-v1-events-eventId
      description: Gets information about an event including a player's progress on that event.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/eventEventInfo'
        - schema:
            type: string
            enum:
              - none
              - part
              - full
            default: full
          in: query
          name: objRewards
          description: Specifies how much of the reward information to include about each objective. `part` includes the information relevant to the player's current progress.
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/quantityFormat'
  '/game/v1/orbRewards/{itemId}':
    parameters:
      - schema:
          type: string
        name: itemId
        in: path
        required: true
        description: The item id of the orb for which possible rewards are requested.
    get:
      summary: OrbRewards
      tags:
        - Items
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ItemQuantity'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-orbRewards-itemId
      description: |-
        Gets the possible rewards for the requested orb.

        Returns `NOT_FOUND` if `itemId` is not the id of an orb item (`isOrb` true).
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/pieceDirectCost_none'
        - $ref: '#/components/parameters/pieceFlatCost_none'
        - $ref: '#/components/parameters/subPieceInfo_full'
        - $ref: '#/components/parameters/quantityFormat'
  /player/v1/auth/consents:
    delete:
      summary: Revoke Consents
      operationId: delete-player-v1-auth-consents
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    description: A string describing the status of the request.
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      description: Revokes all tokens associated with all consents the player has granted to the requesting client application.
      tags:
        - 'Player (m3p.{any})'
    x-noop: Dev
  /player/v1/card:
    get:
      summary: Card
      operationId: get-player-v1-card
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PlayerCard'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '474':
          $ref: '#/components/responses/474_BANNED'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      description: Gets a player's card.
      tags:
        - Player (m3p.f.pr.pro)
  /player/v1/roster:
    get:
      summary: Roster
      operationId: get-player-v1-roster
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CharacterInstance'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '344':
          $ref: '#/components/responses/344_UNCHANGED'
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '422':
          $ref: '#/components/responses/422_PROHIBITED_VALUE'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '474':
          $ref: '#/components/responses/474_BANNED'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      description: Gets a player's roster.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/charInfo_roster'
        - $ref: '#/components/parameters/charWar'
        - $ref: '#/components/parameters/since'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
      tags:
        - Player (m3p.f.pr.ros)
  /player/v1/inventory:
    get:
      summary: Inventory
      operationId: get-player-v1-inventory
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ItemQuantity'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '344':
          $ref: '#/components/responses/344_UNCHANGED'
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '474':
          $ref: '#/components/responses/474_BANNED'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      description: Gets a player's inventory.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/itemFormat_id'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/since'
        - schema:
            type: string
            enum:
              - GEAR
              - ISOITEM
              - SHARD
              - RS
              - COSTUME
              - CONSUMABLE
              - ABILITY_MATERIAL
          in: query
          name: itemType
          description: 'If specified, filters items by type.  If unspecified, returns back all inventory items. '
        - $ref: '#/components/parameters/quantityFormat'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
      tags:
        - Player (m3p.f.pr.inv)
  /player/v1/itemWishlist:
    get:
      summary: Item Wishlist
      operationId: get-player-v1-item-wishlist
      description: Gets a player's item wishlist.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/itemFormat_id'
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/since'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Item'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '344':
          $ref: '#/components/responses/344_UNCHANGED'
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '474':
          $ref: '#/components/responses/474_BANNED'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      tags:
        - Player (m3p.f.pr.inv)
  /player/v1/squads:
    get:
      summary: Squads
      tags:
        - Player (m3p.f.pr.ros)
      operationId: get-player-v1-squads
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SquadsInfo'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '344':
          $ref: '#/components/responses/344_UNCHANGED'
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '474':
          $ref: '#/components/responses/474_BANNED'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      description: Gets a player's squads.
      parameters:
        - $ref: '#/components/parameters/since'
    x-noop: Dev
  /player/v1/alliance/card:
    get:
      summary: Alliance Card
      operationId: get-player-v1-alliance-card
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AllianceCard'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '474':
          $ref: '#/components/responses/474_BANNED'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      parameters:
        - $ref: '#/components/parameters/lang'
      description: Gets a player's alliance's card.
      tags:
        - Player (m3p.f.ar.pro)
  /player/v1/alliance/members:
    get:
      summary: Alliance Members
      operationId: get-player-v1-alliance-members
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AllianceMemberInfo'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '474':
          $ref: '#/components/responses/474_BANNED'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      description: Gets a player's alliance's members.
      tags:
        - Player (m3p.f.ar.pro) 
  /player/v1/recruiting/recruits:
    get:
      summary: Recruiting List
      description: Gets a list of recruit info (Max 100 results).
      tags:
        - 'Player (m3p.{any})'
      operationId: get-player-v1-recruiting-recruit-list
      parameters:
        - $ref: '#/components/parameters/minTcp'
        - $ref: '#/components/parameters/maxTcp'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RecruitInfo'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '474':
          $ref: '#/components/responses/474_BANNED'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
  '/player/v1/recruiting/recruits/{recruitId}':
    get:
      summary: Recruits Info
      parameters:
        - $ref: '#/components/parameters/recruitId'
      description: Gets a recruit's info.
      tags:
        - 'Player (m3p.{any})'
      operationId: get-player-v1-recruiting-recruit-info
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RecruitInfo'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '474':
          $ref: '#/components/responses/474_BANNED'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
  /game/v1/scopes:
    get:
      summary: Scopes
      tags:
        - Scopes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Scope'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-scopes
      description: Gets all Scope objects.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/scopeFormat'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
  /game/v1/localizations:
    get:
      summary: Localizations
      tags:
        - Localization
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: string
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-localizations
      description: Gets the supported localization categories.
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
  '/game/v1/localizations/{tableId}':
    parameters:
      - schema:
          type: string
        name: tableId
        in: path
        required: true
        description: 'The id of the localization table requested, as retrieved from /localizations.'
    get:
      summary: Localization
      tags:
        - Localization
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    description: 'Instead of xx1 and xx2, the keys correspond to the supported languages returned by the languages route.'
                    properties:
                      xx1:
                        $ref: '#/components/schemas/URL'
                      xx2:
                        $ref: '#/components/schemas/URL'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-localizations-tableId
      description: 'Gets links to localization csv files (id, translation) for each language for the requested localization table.'
      parameters: []
  /game/v1/traits:
    get:
      summary: Traits
      tags:
        - Characters
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Trait'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-traits
      description: Gets all Trait objects.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
  /game/v1/decorations:
    get:
      summary: Decorations
      tags:
        - Globals
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      rewardBackground:
                        $ref: '#/components/schemas/URL'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-decorations
      description: Gets URLs of images that can be used for decorations on other images.
  /game/v1/upgradeData:
    get:
      summary: Upgrade Data
      tags:
        - Globals
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      playerLevelTotalXp:
                        $ref: '#/components/schemas/TotalXpByLevel'
                      allianceLevelTotalXp:
                        $ref: '#/components/schemas/TotalXpByLevel'
                      characterLevelTotalXp:
                        $ref: '#/components/schemas/TotalXpByLevel'
                      characterXpCosts:
                        $ref: '#/components/schemas/XpCosts'
                      yellowStarTotalShards:
                        $ref: '#/components/schemas/IndexedShards'
                      yellowStarTotalCosts:
                        $ref: '#/components/schemas/IndexedCosts'
                      abilityLevelRequirements:
                        type: object
                        properties:
                          basic:
                            $ref: '#/components/schemas/IndexedLevelRequirements'
                          special:
                            $ref: '#/components/schemas/IndexedLevelRequirements'
                          ultimate:
                            $ref: '#/components/schemas/IndexedLevelRequirements'
                          passive:
                            $ref: '#/components/schemas/IndexedLevelRequirements'
                      abilityUpgradeCosts:
                        type: object
                        properties:
                          basic:
                            $ref: '#/components/schemas/IndexedCosts'
                          special:
                            $ref: '#/components/schemas/IndexedCosts'
                          ultimate:
                            $ref: '#/components/schemas/IndexedCosts'
                          passive:
                            $ref: '#/components/schemas/IndexedCosts'
                      iso8MatrixLevelRequirements:
                        $ref: '#/components/schemas/IndexedLevelRequirements'
                      iso8MatrixUpgradeCosts:
                        $ref: '#/components/schemas/IndexedCosts'
                      iso8AbilityUpgradeCosts:
                        type: object
                        properties:
                          striker:
                            $ref: '#/components/schemas/IndexedCosts'
                          fortifier:
                            $ref: '#/components/schemas/IndexedCosts'
                          healer:
                            $ref: '#/components/schemas/IndexedCosts'
                          skirmisher:
                            $ref: '#/components/schemas/IndexedCosts'
                          raider:
                            $ref: '#/components/schemas/IndexedCosts'
                      iso8FuseCosts:
                        type: object
                        properties:
                          blaster:
                            $ref: '#/components/schemas/Iso8ClassFuseCosts'
                          brawler:
                            $ref: '#/components/schemas/Iso8ClassFuseCosts'
                          controller:
                            $ref: '#/components/schemas/Iso8ClassFuseCosts'
                          protector:
                            $ref: '#/components/schemas/Iso8ClassFuseCosts'
                          support:
                            $ref: '#/components/schemas/Iso8ClassFuseCosts'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-upgradeData
      description: Gets information about costs and requirements for various upgrades.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/pieceDirectCost_part'
        - $ref: '#/components/parameters/pieceFlatCost_none'
        - $ref: '#/components/parameters/subPieceInfo_full'
        - $ref: '#/components/parameters/quantityFormat'
  '/game/v1/upgradeData/{fieldId}':
    parameters:
      - schema:
          type: string
          enum:
            - playerLevelTotalXp
            - allianceLevelTotalXp
            - characterLevelTotalXp
            - characterXpCosts
            - yellowStarTotalShards
            - yellowStarTotalCosts
            - abilityLevelRequirements
            - abilityUpgradeCosts
            - iso8MatrixLevelRequirements
            - iso8MatrixUpgradeCosts
            - iso8AbilityUpgradeCosts
            - iso8FuseCosts
        name: fieldId
        in: path
        required: true
        description: The id of the specific field to return.
    get:
      summary: Upgrade Data Field
      tags:
        - Globals
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    anyOf:
                      - $ref: '#/components/schemas/TotalXpByLevel'
                      - $ref: '#/components/schemas/XpCosts'
                      - $ref: '#/components/schemas/IndexedShards'
                      - $ref: '#/components/schemas/IndexedCosts'
                      - type: object
                        properties:
                          basic:
                            $ref: '#/components/schemas/IndexedLevelRequirements'
                          special:
                            $ref: '#/components/schemas/IndexedLevelRequirements'
                          ultimate:
                            $ref: '#/components/schemas/IndexedLevelRequirements'
                          passive:
                            $ref: '#/components/schemas/IndexedLevelRequirements'
                      - type: object
                        properties:
                          basic:
                            $ref: '#/components/schemas/IndexedCosts'
                          special:
                            $ref: '#/components/schemas/IndexedCosts'
                          ultimate:
                            $ref: '#/components/schemas/IndexedCosts'
                          passive:
                            $ref: '#/components/schemas/IndexedCosts'
                      - $ref: '#/components/schemas/IndexedLevelRequirements'
                      - type: object
                        properties:
                          striker:
                            $ref: '#/components/schemas/IndexedCosts'
                          fortifier:
                            $ref: '#/components/schemas/IndexedCosts'
                          healer:
                            $ref: '#/components/schemas/IndexedCosts'
                          skirmisher:
                            $ref: '#/components/schemas/IndexedCosts'
                          raider:
                            $ref: '#/components/schemas/IndexedCosts'
                      - type: object
                        properties:
                          blaster:
                            $ref: '#/components/schemas/Iso8ClassFuseCosts'
                          brawler:
                            $ref: '#/components/schemas/Iso8ClassFuseCosts'
                          controller:
                            $ref: '#/components/schemas/Iso8ClassFuseCosts'
                          protector:
                            $ref: '#/components/schemas/Iso8ClassFuseCosts'
                          support:
                            $ref: '#/components/schemas/Iso8ClassFuseCosts'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-upgradeData-fieldId
      description: Gets information about costs and requirements for a specific kind of upgrade.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/pieceDirectCost_part'
        - $ref: '#/components/parameters/pieceFlatCost_none'
        - $ref: '#/components/parameters/subPieceInfo_full'
        - $ref: '#/components/parameters/quantityFormat'
  '/game/v1/items/{itemId}':
    parameters:
      - schema:
          type: string
        name: itemId
        in: path
        required: true
        description: The id of the item requested.
    get:
      summary: Items
      tags:
        - Items
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Item'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-items-itemId
      description: 'Gets the requested Item object. The requested item will always be returned as an object, even if itemFormat=id, but sub-pieces will still follow itemFormat.'
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/pieceDirectCost_part'
        - $ref: '#/components/parameters/pieceFlatCost_none'
        - $ref: '#/components/parameters/subPieceInfo_full'
        - $ref: '#/components/parameters/quantityFormat'
  '/game/v1/items/{itemId}/characters':
    parameters:
      - schema:
          type: string
        name: itemId
        in: path
        required: true
        description: The id of the item requested.
    get:
      summary: Items
      tags:
        - Items
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ItemCharacterInfo'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-items-itemId-characters
      description: Gets the characters that use the requested Item.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/charInfo_item'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
  /game/v1/iso8Abilities:
    get:
      summary: ISO-8 Abilities
      tags:
        - Globals
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      striker:
                        $ref: '#/components/schemas/Ability'
                      fortifier:
                        $ref: '#/components/schemas/Ability'
                      healer:
                        $ref: '#/components/schemas/Ability'
                      skirmisher:
                        $ref: '#/components/schemas/Ability'
                      raider:
                        $ref: '#/components/schemas/Ability'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-iso8Abilities
      description: Gets the ISO-8 Abilities for all the classes.
      parameters:
        - $ref: '#/components/parameters/lang'
  '/game/v1/iso8Abilities/{classId}':
    parameters:
      - schema:
          type: string
          enum:
            - striker
            - fortifier
            - healer
            - skirmisher
            - raider
        name: classId
        in: path
        required: true
        description: Id of the requested class.
    get:
      summary: ISO-8 Ability
      tags:
        - Globals
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Ability'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-iso8Abilities-classId
      description: Gets the ISO-8 Ability for the requested class.
      parameters:
        - $ref: '#/components/parameters/lang'
  /game/v1/analysis/teamOrder:
    get:
      summary: Team Order
      operationId: get-game-v1-teamorder
      description: Gets team order data for all tabs.
      tags:
        - Analysis
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      roster:
                        $ref: '#/components/schemas/TeamOrder'
                      blitz:
                        $ref: '#/components/schemas/TeamOrder'
                      tower:
                        $ref: '#/components/schemas/TeamOrder'
                      raids:
                        $ref: '#/components/schemas/TeamOrder'
                      arena:
                        $ref: '#/components/schemas/TeamOrder'
                      war:
                        $ref: '#/components/schemas/TeamOrder'
                      crucible:
                        $ref: '#/components/schemas/TeamOrder'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
  '/game/v1/analysis/teamOrder/{tabId}':
    parameters:
      - $ref: '#/components/parameters/squadPathTabId'
    get:
      summary: Team Order
      operationId: get-game-v1-teamorder-tabId
      description: Gets team order data for the given tab.
      tags:
        - Analysis
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TeamOrder'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
  /game/v1/characters:
    get:
      summary: Characters
      tags:
        - Characters
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CharacterInfo'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-characters
      description: Gets information about a set of characters.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/charMission'
        - $ref: '#/components/parameters/charTrait'
        - $ref: '#/components/parameters/charStatus'
        - $ref: '#/components/parameters/charInfo_char'
        - schema:
            type: string
            enum:
              - none
              - full
            default: none
          in: query
          name: costumes
          description: Specifies how much costume information to include about each character.
        - schema:
            type: string
            enum:
              - none
              - full
            default: none
          in: query
          name: abilityKits
          description: Specifies how much ability kit information to include about each character.
        - schema:
            type: string
            enum:
              - none
              - full
            default: none
          in: query
          name: gearTiers
          description: Specifies how much gear tier information to include about each character.
        - schema:
            type: string
            enum:
              - none
              - full
            default: none
          in: query
          name: pieceInfo
          description: Specifies how much metadata to include about each top-level item.
        - $ref: '#/components/parameters/quantityFormat'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - $ref: '#/components/parameters/charAdoption'
  '/game/v1/characters/{characterId}':
    parameters:
      - $ref: '#/components/parameters/charPathCharacterId'
    get:
      summary: Character
      tags:
        - Characters
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CharacterInfo'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-characters-characterId
      description: Gets information about a character.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/charMission_noBoth'
        - $ref: '#/components/parameters/charInfo_char'
        - schema:
            type: string
            enum:
              - none
              - full
            default: full
          in: query
          name: costumes
          description: Specifies how much costume information to include about each character.
        - schema:
            type: string
            enum:
              - none
              - full
            default: full
          in: query
          name: abilityKits
          description: Specifies how much ability kit information to include about each character.
        - schema:
            type: string
            enum:
              - none
              - full
            default: full
          in: query
          name: gearTiers
          description: Specifies how much gear tier information to include about each character.
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/pieceDirectCost_none'
        - $ref: '#/components/parameters/pieceFlatCost_none'
        - $ref: '#/components/parameters/subPieceInfo_full'
        - $ref: '#/components/parameters/quantityFormat'
        - $ref: '#/components/parameters/charAdoption'
  /game/v1/characterInstances:
    get:
      summary: Character Instances
      tags:
        - Characters
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CharacterInstance'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '422':
          $ref: '#/components/responses/422_PROHIBITED_VALUE'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-characterInstances
      description: Gets information about specific requested instances of a set of characters.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/charMission'
        - $ref: '#/components/parameters/charTrait'
        - $ref: '#/components/parameters/charStatus'
        - $ref: '#/components/parameters/charLevel'
        - $ref: '#/components/parameters/charYellow'
        - $ref: '#/components/parameters/charRed'
        - $ref: '#/components/parameters/charGearTier'
        - $ref: '#/components/parameters/charSlot0'
        - $ref: '#/components/parameters/charSlot1'
        - $ref: '#/components/parameters/charSlot2'
        - $ref: '#/components/parameters/charSlot3'
        - $ref: '#/components/parameters/charSlot4'
        - $ref: '#/components/parameters/charSlot5'
        - $ref: '#/components/parameters/charBasic'
        - $ref: '#/components/parameters/charSpecial'
        - $ref: '#/components/parameters/charUltimate'
        - $ref: '#/components/parameters/charPassive'
        - $ref: '#/components/parameters/charIso8'
        - $ref: '#/components/parameters/charStark'
        - $ref: '#/components/parameters/charWar'
        - $ref: '#/components/parameters/quantityFormat'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
  '/game/v1/characterInstances/{level}/{yellow}/{red}/{gearTier}':
    parameters:
      - $ref: '#/components/parameters/pathCharLevel'
      - $ref: '#/components/parameters/pathCharYellow'
      - $ref: '#/components/parameters/pathCharRed'
      - $ref: '#/components/parameters/pathCharGearTier'
    get:
      summary: Character Instances (Shortcut 1)
      tags:
        - Characters (Shortcuts)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CharacterInstance'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '422':
          $ref: '#/components/responses/422_PROHIBITED_VALUE'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-characterInstances-level-yellow-red-gearTier
      description: Gets information about specific requested instances of a set of characters.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/charMission'
        - $ref: '#/components/parameters/charTrait'
        - $ref: '#/components/parameters/charStatus'
        - $ref: '#/components/parameters/charSlot0'
        - $ref: '#/components/parameters/charSlot1'
        - $ref: '#/components/parameters/charSlot2'
        - $ref: '#/components/parameters/charSlot3'
        - $ref: '#/components/parameters/charSlot4'
        - $ref: '#/components/parameters/charSlot5'
        - $ref: '#/components/parameters/charBasic'
        - $ref: '#/components/parameters/charSpecial'
        - $ref: '#/components/parameters/charUltimate'
        - $ref: '#/components/parameters/charPassive'
        - $ref: '#/components/parameters/charIso8'
        - $ref: '#/components/parameters/charStark'
        - $ref: '#/components/parameters/charWar'
        - $ref: '#/components/parameters/quantityFormat'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
  '/game/v1/characterInstances/{level}/{yellow}/{red}/{gearTier}/{slot0}/{slot1}/{slot2}/{slot3}/{slot4}/{slot5}':
    parameters:
      - $ref: '#/components/parameters/pathCharLevel'
      - $ref: '#/components/parameters/pathCharYellow'
      - $ref: '#/components/parameters/pathCharRed'
      - $ref: '#/components/parameters/pathCharGearTier'
      - $ref: '#/components/parameters/pathCharSlot0'
      - $ref: '#/components/parameters/pathCharSlot1'
      - $ref: '#/components/parameters/pathCharSlot2'
      - $ref: '#/components/parameters/pathCharSlot3'
      - $ref: '#/components/parameters/pathCharSlot4'
      - $ref: '#/components/parameters/pathCharSlot5'
    get:
      summary: Character Instances (Shortcut 2)
      tags:
        - Characters (Shortcuts)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CharacterInstance'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '422':
          $ref: '#/components/responses/422_PROHIBITED_VALUE'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-characterInstances-level-yellow-red-gearTier-slot0-slot1-slot2-slot3-slot4-slot5
      description: Gets information about specific requested instances of a set of characters.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/charMission'
        - $ref: '#/components/parameters/charTrait'
        - $ref: '#/components/parameters/charStatus'
        - $ref: '#/components/parameters/charBasic'
        - $ref: '#/components/parameters/charSpecial'
        - $ref: '#/components/parameters/charUltimate'
        - $ref: '#/components/parameters/charPassive'
        - $ref: '#/components/parameters/charIso8'
        - $ref: '#/components/parameters/charStark'
        - $ref: '#/components/parameters/charWar'
        - $ref: '#/components/parameters/quantityFormat'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
  '/game/v1/characterInstances/{level}/{yellow}/{red}/{gearTier}/{slot0}/{slot1}/{slot2}/{slot3}/{slot4}/{slot5}/{basic}/{special}/{ultimate}/{passive}':
    parameters:
      - $ref: '#/components/parameters/pathCharLevel'
      - $ref: '#/components/parameters/pathCharYellow'
      - $ref: '#/components/parameters/pathCharRed'
      - $ref: '#/components/parameters/pathCharGearTier'
      - $ref: '#/components/parameters/pathCharSlot0'
      - $ref: '#/components/parameters/pathCharSlot1'
      - $ref: '#/components/parameters/pathCharSlot2'
      - $ref: '#/components/parameters/pathCharSlot3'
      - $ref: '#/components/parameters/pathCharSlot4'
      - $ref: '#/components/parameters/pathCharSlot5'
      - $ref: '#/components/parameters/pathCharBasic'
      - $ref: '#/components/parameters/pathCharSpecial'
      - $ref: '#/components/parameters/pathCharUltimate'
      - $ref: '#/components/parameters/pathCharPassive'
    get:
      summary: Character Instances (Shortcut 3)
      tags:
        - Characters (Shortcuts)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CharacterInstance'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '422':
          $ref: '#/components/responses/422_PROHIBITED_VALUE'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-characterInstances-level-yellow-red-gearTier-slot0-slot1-slot2-slot3-slot4-slot5-basic-special-ultimate-passive
      description: Gets information about specific requested instances of a set of characters.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/charMission'
        - $ref: '#/components/parameters/charTrait'
        - $ref: '#/components/parameters/charStatus'
        - $ref: '#/components/parameters/charIso8'
        - $ref: '#/components/parameters/charStark'
        - $ref: '#/components/parameters/charWar'
        - $ref: '#/components/parameters/quantityFormat'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
  '/game/v1/characterInstances/{characterId}':
    parameters:
      - $ref: '#/components/parameters/charPathCharacterId'
    get:
      summary: Character Instance(s)
      tags:
        - Characters
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    oneOf:
                      - $ref: '#/components/schemas/CharacterInstance'
                      - type: array
                        items:
                          $ref: '#/components/schemas/CharacterInstance'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '422':
          $ref: '#/components/responses/422_PROHIBITED_VALUE'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-characterInstances-characterId
      description: |-
        Gets information about a specific requested instance of a specific character.

        Any *one* of level, yellow, red, or gearTier can be set to "all". In this case, an array of CharacterInstance objects will be returned, where only the following fields are filled in on each object: the stats field, the power field, the field set to "all", and any fields which depend on that (for example, asking for "max" ultimate for "all" gear tiers).
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/charMission_noBoth'
        - $ref: '#/components/parameters/charInfo_instance'
        - $ref: '#/components/parameters/charAbilityKits'
        - $ref: '#/components/parameters/charGearTiers'
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/pieceDirectCost_none'
        - $ref: '#/components/parameters/pieceFlatCost_none'
        - $ref: '#/components/parameters/subPieceInfo_full'
        - $ref: '#/components/parameters/charLevel'
        - $ref: '#/components/parameters/charYellow'
        - $ref: '#/components/parameters/charRed'
        - $ref: '#/components/parameters/charGearTier'
        - $ref: '#/components/parameters/charSlot0'
        - $ref: '#/components/parameters/charSlot1'
        - $ref: '#/components/parameters/charSlot2'
        - $ref: '#/components/parameters/charSlot3'
        - $ref: '#/components/parameters/charSlot4'
        - $ref: '#/components/parameters/charSlot5'
        - $ref: '#/components/parameters/charBasic'
        - $ref: '#/components/parameters/charSpecial'
        - $ref: '#/components/parameters/charUltimate'
        - $ref: '#/components/parameters/charPassive'
        - $ref: '#/components/parameters/charIso8'
        - $ref: '#/components/parameters/charStark'
        - $ref: '#/components/parameters/charWar'
        - $ref: '#/components/parameters/quantityFormat'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
  '/game/v1/characterInstances/{characterId}/{level}/{yellow}/{red}/{gearTier}':
    parameters:
      - $ref: '#/components/parameters/charPathCharacterId'
      - $ref: '#/components/parameters/pathCharLevel'
      - $ref: '#/components/parameters/pathCharYellow'
      - $ref: '#/components/parameters/pathCharRed'
      - $ref: '#/components/parameters/pathCharGearTier'
    get:
      summary: Character Instance(s) (Shortcut 1)
      tags:
        - Characters (Shortcuts)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    oneOf:
                      - $ref: '#/components/schemas/CharacterInstance'
                      - type: array
                        items:
                          $ref: '#/components/schemas/CharacterInstance'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '422':
          $ref: '#/components/responses/422_PROHIBITED_VALUE'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-characterInstances-characterId-level-yellow-red-gearTier
      description: |-
        Gets information about a specific requested instance of a specific character.

        Any *one* of level, yellow, red, or gearTier can be set to "all". In this case, an array of CharacterInstance objects will be returned, where only the following fields are filled in on each object: the stats field, the power field, the field set to "all", and any fields which depend on that (for example, asking for "max" ultimate for "all" gear tiers).
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/charMission_noBoth'
        - $ref: '#/components/parameters/charInfo_instance'
        - $ref: '#/components/parameters/charAbilityKits'
        - $ref: '#/components/parameters/charGearTiers'
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/pieceDirectCost_none'
        - $ref: '#/components/parameters/pieceFlatCost_none'
        - $ref: '#/components/parameters/subPieceInfo_full'
        - $ref: '#/components/parameters/charSlot0'
        - $ref: '#/components/parameters/charSlot1'
        - $ref: '#/components/parameters/charSlot2'
        - $ref: '#/components/parameters/charSlot3'
        - $ref: '#/components/parameters/charSlot4'
        - $ref: '#/components/parameters/charSlot5'
        - $ref: '#/components/parameters/charBasic'
        - $ref: '#/components/parameters/charSpecial'
        - $ref: '#/components/parameters/charUltimate'
        - $ref: '#/components/parameters/charPassive'
        - $ref: '#/components/parameters/charIso8'
        - $ref: '#/components/parameters/charStark'
        - $ref: '#/components/parameters/charWar'
        - $ref: '#/components/parameters/quantityFormat'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
  '/game/v1/characterInstances/{characterId}/{level}/{yellow}/{red}/{gearTier}/{slot0}/{slot1}/{slot2}/{slot3}/{slot4}/{slot5}':
    parameters:
      - $ref: '#/components/parameters/charPathCharacterId'
      - $ref: '#/components/parameters/pathCharLevel'
      - $ref: '#/components/parameters/pathCharYellow'
      - $ref: '#/components/parameters/pathCharRed'
      - $ref: '#/components/parameters/pathCharGearTier'
      - $ref: '#/components/parameters/pathCharSlot0'
      - $ref: '#/components/parameters/pathCharSlot1'
      - $ref: '#/components/parameters/pathCharSlot2'
      - $ref: '#/components/parameters/pathCharSlot3'
      - $ref: '#/components/parameters/pathCharSlot4'
      - $ref: '#/components/parameters/pathCharSlot5'
    get:
      summary: Character Instance(s) (Shortcut 2)
      tags:
        - Characters (Shortcuts)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    oneOf:
                      - $ref: '#/components/schemas/CharacterInstance'
                      - type: array
                        items:
                          $ref: '#/components/schemas/CharacterInstance'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '422':
          $ref: '#/components/responses/422_PROHIBITED_VALUE'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-characterInstances-characterId-level-yellow-red-gearTier-slot0-slot1-slot2-slot3-slot4-slot5
      description: |-
        Gets information about a specific requested instance of a specific character.

        Any *one* of level, yellow, red, or gearTier can be set to "all". In this case, an array of CharacterInstance objects will be returned, where only the following fields are filled in on each object: the stats field, the power field, the field set to "all", and any fields which depend on that (for example, asking for "max" ultimate for "all" gear tiers).
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/charMission_noBoth'
        - $ref: '#/components/parameters/charInfo_instance'
        - $ref: '#/components/parameters/charAbilityKits'
        - $ref: '#/components/parameters/charGearTiers'
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/pieceDirectCost_none'
        - $ref: '#/components/parameters/pieceFlatCost_none'
        - $ref: '#/components/parameters/subPieceInfo_full'
        - $ref: '#/components/parameters/charBasic'
        - $ref: '#/components/parameters/charSpecial'
        - $ref: '#/components/parameters/charUltimate'
        - $ref: '#/components/parameters/charPassive'
        - $ref: '#/components/parameters/charIso8'
        - $ref: '#/components/parameters/charStark'
        - $ref: '#/components/parameters/charWar'
        - $ref: '#/components/parameters/quantityFormat'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
  '/game/v1/characterInstances/{characterId}/{level}/{yellow}/{red}/{gearTier}/{slot0}/{slot1}/{slot2}/{slot3}/{slot4}/{slot5}/{basic}/{special}/{ultimate}/{passive}':
    parameters:
      - $ref: '#/components/parameters/charPathCharacterId'
      - $ref: '#/components/parameters/pathCharLevel'
      - $ref: '#/components/parameters/pathCharYellow'
      - $ref: '#/components/parameters/pathCharRed'
      - $ref: '#/components/parameters/pathCharGearTier'
      - $ref: '#/components/parameters/pathCharSlot0'
      - $ref: '#/components/parameters/pathCharSlot1'
      - $ref: '#/components/parameters/pathCharSlot2'
      - $ref: '#/components/parameters/pathCharSlot3'
      - $ref: '#/components/parameters/pathCharSlot4'
      - $ref: '#/components/parameters/pathCharSlot5'
      - $ref: '#/components/parameters/pathCharBasic'
      - $ref: '#/components/parameters/pathCharSpecial'
      - $ref: '#/components/parameters/pathCharUltimate'
      - $ref: '#/components/parameters/pathCharPassive'
    get:
      summary: Character Instance(s) (Shortcut 3)
      tags:
        - Characters (Shortcuts)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    oneOf:
                      - $ref: '#/components/schemas/CharacterInstance'
                      - type: array
                        items:
                          $ref: '#/components/schemas/CharacterInstance'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '422':
          $ref: '#/components/responses/422_PROHIBITED_VALUE'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-characterInstances-characterId-level-yellow-red-gearTier-slot0-slot1-slot2-slot3-slot4-slot5-basic-special-ultimate-passive
      description: |-
        Gets information about a specific requested instance of a specific character.

        Any *one* of level, yellow, red, or gearTier can be set to "all". In this case, an array of CharacterInstance objects will be returned, where only the following fields are filled in on each object: the stats field, the power field, the field set to "all", and any fields which depend on that (for example, asking for "max" ultimate for "all" gear tiers).
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/charMission_noBoth'
        - $ref: '#/components/parameters/charInfo_instance'
        - $ref: '#/components/parameters/charAbilityKits'
        - $ref: '#/components/parameters/charGearTiers'
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/pieceDirectCost_none'
        - $ref: '#/components/parameters/pieceFlatCost_none'
        - $ref: '#/components/parameters/subPieceInfo_full'
        - $ref: '#/components/parameters/charIso8'
        - $ref: '#/components/parameters/charStark'
        - $ref: '#/components/parameters/charWar'
        - $ref: '#/components/parameters/quantityFormat'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
  '/game/v1/characterInstanceCaps':
    get:
      summary: Character Instance Caps
      tags:
        - Characters
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CharacterInstance'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-character-instance-caps
      description: Gets information about the maximum gear tier and ability levels per character level.
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
  '/game/v1/nodeCombats/{combatId}':
    parameters:
      - schema:
          type: string
        name: combatId
        in: path
        required: true
        description: The ID of the NodeCombat.
    get:
      summary: NodeCombat
      tags:
        - Combat
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/NodeCombat'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-nodeCombats-combatId
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/charInfo_combat'
        - schema:
            type: string
          in: query
          name: difficultyGroup
          description: 'Specifies the ID of the raid for which to adjust the difficulty of the NodeCombat. If unspecified or this NodeCombat is not part of that raid, normal difficulty is returned.'
        - schema:
            type: integer
            format: int32
          in: query
          name: difficulty
          description: 'Only has an effect if `difficultyGroup` is also specified. In that case, `difficulty` specifies the difficulty of the raid to adjust for. If omitted, then all CharacterInstance objects are replaced with arrays, with [0] being the normal difficulty, [1] being difficulty 1 from the specified difficulty group, and so on.'
        - $ref: '#/components/parameters/quantityFormat'
      description: Gets the requested NodeCombat object.
  '/game/v1/episodics/{episodicType}':
    parameters:
      - $ref: '#/components/parameters/pathEpisodicType'
    get:
      summary: Episodics
      tags:
        - Combat
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EpisodicInfo'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-episodics-episodicType
      description: Gets information about a set of episodics.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/quantityFormat'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
  '/game/v1/episodics/{episodicType}/{episodicId}':
    parameters:
      - $ref: '#/components/parameters/pathEpisodicType'
      - $ref: '#/components/parameters/pathEpisodicId'
    get:
      summary: Episodic
      tags:
        - Combat
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EpisodicInfo'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-episodics-episodicType-episodicId
      description: Gets information about an episodic.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/nodeInfo_part'
        - $ref: '#/components/parameters/nodeReqs_none'
        - $ref: '#/components/parameters/nodeRewards_none'
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/quantityFormat'
  '/game/v1/episodics/{episodicType}/{episodicId}/{chapterNumber}':
    parameters:
      - $ref: '#/components/parameters/pathEpisodicType'
      - $ref: '#/components/parameters/pathEpisodicId'
      - $ref: '#/components/parameters/pathChapterNumber'
    get:
      summary: Chapter
      tags:
        - Combat
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EpisodicInfo'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-episodics-episodicType-episodicId-chapterNumber
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/nodeInfo_part'
        - $ref: '#/components/parameters/nodeReqs_none'
        - $ref: '#/components/parameters/nodeRewards_none'
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/nodeCombat_none'
        - $ref: '#/components/parameters/charInfo_combat'
        - $ref: '#/components/parameters/quantityFormat'
      description: |-
        Gets information about an episodic, with details about one of its chapters.

        Information about the unrequested chapters are omitted.

        Episodics like challenges that do not have multiple chapters are episodics with just one chapter: Chapter 1.
  '/game/v1/episodics/{episodicType}/{episodicId}/{chapterNumber}/{tierNumber}':
    parameters:
      - $ref: '#/components/parameters/pathEpisodicType'
      - $ref: '#/components/parameters/pathEpisodicId'
      - $ref: '#/components/parameters/pathChapterNumber'
      - schema:
          type: string
        name: tierNumber
        in: path
        required: true
        description: The 1-based tier number for which information is requested.
    get:
      summary: Tier of Chapter
      tags:
        - Combat
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/NodeInfo'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-episodics-episodicType-episodicId-chapterNumber-tierNumber
      description: Gets node information about one tier of a chapter of an episodic.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/nodeInfo_full'
        - $ref: '#/components/parameters/nodeReqs_full'
        - $ref: '#/components/parameters/nodeRewards_full'
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/nodeCombat_none'
        - $ref: '#/components/parameters/charInfo_combat'
        - $ref: '#/components/parameters/quantityFormat'
  /game/v1/dds:
    get:
      summary: Dark Dimensions
      tags:
        - Combat
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RaidInfo'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-dds
      description: Gets information about a set of dark dimensions.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/nodeInfo_none'
        - $ref: '#/components/parameters/nodeReqs_none'
        - $ref: '#/components/parameters/nodeRewards_none'
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/raidInfo_none'
        - $ref: '#/components/parameters/raidMap_none'
        - $ref: '#/components/parameters/raidRewards_none'
        - $ref: '#/components/parameters/quantityFormat'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
  '/game/v1/dds/{ddId}':
    parameters:
      - $ref: '#/components/parameters/pathDdId'
    get:
      summary: Dark Dimension
      tags:
        - Combat
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RaidInfo'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-dds-ddId
      description: Gets information about a dark dimension.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/nodeInfo_none'
        - $ref: '#/components/parameters/nodeReqs_full'
        - $ref: '#/components/parameters/nodeRewards_full'
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/raidInfo_full'
        - $ref: '#/components/parameters/raidMap_full'
        - $ref: '#/components/parameters/raidRewards_full'
        - $ref: '#/components/parameters/quantityFormat'
        - $ref: '#/components/parameters/nodeCombat_none'
        - $ref: '#/components/parameters/charInfo_combat'
  '/game/v1/dds/{ddId}/{roomId}':
    parameters:
      - $ref: '#/components/parameters/pathDdId'
      - $ref: '#/components/parameters/pathRoomId'
    get:
      summary: Dark Dimension Room
      tags:
        - Combat
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/NodeInfo'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-dds-ddId-roomId
      description: Gets node information about a room in a dark dimension.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/nodeInfo_full'
        - $ref: '#/components/parameters/nodeReqs_full'
        - $ref: '#/components/parameters/nodeRewards_full'
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/raidMap_none'
        - $ref: '#/components/parameters/nodeCombat_none'
        - $ref: '#/components/parameters/charInfo_combat'
        - $ref: '#/components/parameters/quantityFormat'
  /game/v1/raidGroups:
    get:
      summary: Raid Groups
      tags:
        - Combat
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RaidGroupInfo'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-raidGroups
      description: Gets information about a set of raid groups.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/quantityFormat'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
  /game/v1/raids:
    get:
      summary: Raids
      tags:
        - Combat
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RaidInfo'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-raids
      description: Gets information about a set of raids.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/nodeInfo_none'
        - $ref: '#/components/parameters/nodeReqs_none'
        - $ref: '#/components/parameters/nodeRewards_none'
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/raidInfo_none'
        - $ref: '#/components/parameters/raidMap_none'
        - $ref: '#/components/parameters/raidRewards_none'
        - $ref: '#/components/parameters/raidRaidDiffs_none'
        - schema:
            type: string
          in: query
          name: groupId
          description: 'Limits results to raids in the identified raid group. (If omitted, results are not limited to any raid group.)'
        - $ref: '#/components/parameters/quantityFormat'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
  '/game/v1/raids/{raidId}':
    parameters:
      - $ref: '#/components/parameters/pathRaidId'
    get:
      summary: Raid
      tags:
        - Combat
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RaidInfo'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-raids-raidId
      description: Gets information about a raid.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/nodeInfo_none'
        - $ref: '#/components/parameters/nodeReqs_full'
        - $ref: '#/components/parameters/nodeRewards_full'
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/raidInfo_full'
        - $ref: '#/components/parameters/raidMap_full'
        - $ref: '#/components/parameters/raidRewards_full'
        - $ref: '#/components/parameters/raidRaidDiffs_full'
        - $ref: '#/components/parameters/raidDifficulty'
        - $ref: '#/components/parameters/nodeCombat_none'
        - $ref: '#/components/parameters/charInfo_combat'
        - $ref: '#/components/parameters/quantityFormat'
  '/game/v1/raids/{raidId}/{roomId}':
    parameters:
      - $ref: '#/components/parameters/pathRaidId'
      - $ref: '#/components/parameters/pathRoomId'
    get:
      summary: Raid Room
      tags:
        - Combat
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/NodeInfo'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-raids-raidId-roomId
      description: Gets node information about a room in a raid.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/nodeInfo_full'
        - $ref: '#/components/parameters/nodeReqs_full'
        - $ref: '#/components/parameters/nodeRewards_full'
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/raidMap_none'
        - $ref: '#/components/parameters/raidDifficulty'
        - $ref: '#/components/parameters/nodeCombat_none'
        - $ref: '#/components/parameters/charInfo_combat'
        - $ref: '#/components/parameters/quantityFormat'
  /game/v1/pickYourPoisons:
    get:
      summary: PickYourPoisons
      tags:
        - Combat
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RaidInfo'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-pickYourPoisons
      description: Gets information about pick-your-poison maps.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/nodeInfo_none'
        - $ref: '#/components/parameters/nodeReqs_none'
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/raidInfo_none'
        - $ref: '#/components/parameters/raidMap_none'
        - $ref: '#/components/parameters/raidRaidDiffs_none'
        - $ref: '#/components/parameters/quantityFormat'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
  '/game/v1/pickYourPoisons/{pypId}':
    parameters:
      - $ref: '#/components/parameters/pathPypId'
    get:
      summary: PickYourPoison
      tags:
        - Combat
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RaidInfo'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-pickYourPoisons-pypId
      description: Gets information about a pick-your-poison map.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/nodeInfo_none'
        - $ref: '#/components/parameters/nodeReqs_full'
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/raidInfo_full'
        - $ref: '#/components/parameters/raidMap_full'
        - $ref: '#/components/parameters/raidRaidDiffs_full'
        - $ref: '#/components/parameters/raidDifficulty'
        - $ref: '#/components/parameters/nodeCombat_none'
        - $ref: '#/components/parameters/charInfo_combat'
        - $ref: '#/components/parameters/quantityFormat'
  '/game/v1/pickYourPoisons/{pypId}/{roomId}':
    parameters:
      - $ref: '#/components/parameters/pathPypId'
      - $ref: '#/components/parameters/pathRoomId'
    get:
      summary: PickYourPoison Room
      tags:
        - Combat
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/NodeInfo'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-pickYourPoisons-pypId-roomId
      description: Gets node information about a room in a pick-your-poison map.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/nodeInfo_full'
        - $ref: '#/components/parameters/nodeReqs_full'
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/raidMap_none'
        - $ref: '#/components/parameters/raidDifficulty'
        - $ref: '#/components/parameters/nodeCombat_none'
        - $ref: '#/components/parameters/charInfo_combat'
        - $ref: '#/components/parameters/quantityFormat'
  /game/v1/survivalTowers:
    get:
      summary: Survival Towers
      tags:
        - Combat
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RaidInfo'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-survivalTower
      description: Gets information about survival tower maps.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/nodeInfo_none'
        - $ref: '#/components/parameters/nodeReqs_none'
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/raidInfo_none'
        - $ref: '#/components/parameters/raidMap_none'
        - $ref: '#/components/parameters/quantityFormat'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'      
  '/game/v1/survivalTowers/{stId}':
    parameters:
      - $ref: '#/components/parameters/pathStId'
    get:
      summary: Survival Tower
      tags:
        - Combat
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RaidInfo'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-survivalTower-stId
      description: Gets information about a survival tower map.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/nodeInfo_none'
        - $ref: '#/components/parameters/nodeReqs_full'
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/raidInfo_full'
        - $ref: '#/components/parameters/raidMap_full'
        - $ref: '#/components/parameters/nodeCombat_none'
        - $ref: '#/components/parameters/charInfo_combat'
        - $ref: '#/components/parameters/quantityFormat'
  '/game/v1/survivalTowers/{stId}/{roomId}':
    parameters:
      - $ref: '#/components/parameters/pathStId'
      - $ref: '#/components/parameters/pathRoomId'
    get:
      summary: Surival Tower Room
      tags:
        - Combat
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/NodeInfo'
                  meta:
                    $ref: '#/components/schemas/Meta'
              examples:
                none:
                  value:
                    none: no example
        '404':
          $ref: '#/components/responses/404_NOT_FOUND'
        '472':
          $ref: '#/components/responses/472_RESPONSE_TOO_LARGE'
        '500':
          $ref: '#/components/responses/500_INTERNAL_SERVER_ERROR'
        '552':
          $ref: '#/components/responses/552_RESTARTING'
        '553':
          $ref: '#/components/responses/553_MAINTENANCE'
      operationId: get-game-v1-survivalTower-stId-roomId
      description: Gets node information about a room in a survival tower map.
      parameters:
        - $ref: '#/components/parameters/lang'
        - $ref: '#/components/parameters/itemFormat'
        - $ref: '#/components/parameters/statsFormat'
        - $ref: '#/components/parameters/traitFormat'
        - $ref: '#/components/parameters/nodeInfo_full'
        - $ref: '#/components/parameters/nodeReqs_full'
        - $ref: '#/components/parameters/pieceInfo_full'
        - $ref: '#/components/parameters/raidMap_none'
        - $ref: '#/components/parameters/nodeCombat_none'
        - $ref: '#/components/parameters/charInfo_combat'
        - $ref: '#/components/parameters/quantityFormat'
  /util/v1/gatedRefresh:
    post:
      summary: Gated Refresh
      operationId: post-util-v1-gatedRefresh
      security:
        - APIKey: []
          http-basic: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  expires_in:
                    type: number
                  id_token:
                    type: string
                  refresh_token:
                    type: string
                  scope:
                    type: string
                  token_type:
                    type: string
              examples:
                none:
                  value:
                    none: no example
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  gatewayError:
                    type: string
                    enum:
                      - INVALID_REQUEST
                      - INVALID_CONTENT_TYPE
                    example: INVALID_REQUEST
                    description: |-
                      `INVALID_REQUEST` - The requester didn't provide valid input.
                      `INVALID_CONTENT_TYPE` - The request body and content type do not match.
        '473':
          description: 'Gated, due to a request with the same refresh token within the past 20 seconds.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  gatewayError:
                    type: string
                    example: GATED
                    description: '`GATED` - A request with the same refresh token was received in the past 20 seconds.'
                    enum:
                      - GATED
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  gatewayError:
                    type: string
      description: |-
        Refresh tokens can only be used once. For security purposes, reusing a refresh token at the OAuth server will invalidate the entire token chain, forcing the player to log in to reauthorize your application again.

        If your application is running in a concurrent distributed environment, where it is difficult to ensure that the refresh token is not reused in a tight timeframe, you may consider refreshing your tokens using this gated refresh route instead.

        The API for the gated refresh route is the same as for the OAuth token refresh route, except that any additional requests (beyond the first) using the same refresh token within 20 seconds will generate a 473 GATED response. This will protect the token chain from being invalidated, giving your application the opportunity to wait for the new tokens being obtained in another thread (and/or processor) of your application.

        Note that reusing a refresh token after 20 seconds will no longer be gated, thus invalidating the entire token chain.

        Any error from this gateway will contain a `gatewayError` field, as documented in the error responses to the right. Otherwise, the response will be the one from the OAuth server, which may include additional errors according to the OAuth specification.

        NOTE: If your client is a server-side app, you will need to provide your credentials according to the http basic auth section at the top of the page.
      tags:
        - Util
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  example: refresh_token
                  description: The grant type must be `refresh_token`.
                client_id:
                  type: string
                redirect_uri:
                  type: string
                refresh_token:
                  type: string
              required:
                - grant_type
                - client_id
                - redirect_uri
                - refresh_token
          application/json:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  example: refresh_token
                  description: The grant type must be `refresh_token`.
                client_id:
                  type: string
                redirect_uri:
                  type: string
                refresh_token:
                  type: string
              required:
                - grant_type
                - client_id
                - redirect_uri
                - refresh_token
components:
  schemas:
    Ad:
      title: Ad
      type: object
      description: Info about an ad.
      properties:
        id:
          type: string
          description: The ID of the ad.
        exp:
          $ref: '#/components/schemas/DateTime'
    AllianceQualifications:
      title: AllianceQualifications
      type: object
      description: Info about the qualifications to join an alliance.
      properties:
        tcp:
          type: integer
          description: The total collection power required.
        lang:
          type: array
          items:
            $ref: '#/components/schemas/LanguageCode'
        wwPoints:
          type: integer
          description: The most recent total world warrior points required.
        custom:
          type: array
          description: The custom text values for an alliance.
          maxItems: 3
          items:
            $ref: '#/components/schemas/CustomText'
        raids:
          type: array
          items:
            $ref: '#/components/schemas/RaidCompletionInfo'
    CustomText:
      title: CustomText
      type: object
      properties:
        text:
          type: string
          description: The custom text (max 24 characters)
      description: The custom text
    RaidCompletionInfo:
      title: RaidCompletionInfo
      type: object
      description: The completion info about a given raid.
      properties:
        id:
          type: string
          description: The ID of this raid or dark dimension.
        groupId:
          type: string
          description: The ID of the raid group to which this raid belongs.
        name:
          type: string
          description: (localized)
        difficulty:
          type: integer
          description: The raid difficulty level.
        completion:
          type: integer
          maximum: 100
          minimum: 0
          description: The completion percentage of the raid.
    LanguageCode:
      title: LanguageCode
      type: string
      description: The language code.
    URL:
      type: string
      title: URL
      description: A URL.
      format: uri
    SubName:
      type: string
      description: (localized) Short description shown under the name.
      title: SubName
    Details:
      type: string
      description: (localized) Details shown inline when tapping the info button.
      title: Details
    PopupDetails:
      type: string
      description: (localized) Details shown in a popup when tapping the info button.
      title: PopupDetails
    TotalXpByLevel:
      title: TotalXpByLevel
      type: array
      items:
        type: integer
        format: int32
      description: Total XP required to reach that level starting from level 1. (Index 0 is null. Index N is the XP required for level N.)
    XpCosts:
      title: XpCosts
      type: array
      description: Ways to obtain XP.
      items:
        type: object
        description: One way to obtain XP.
        properties:
          xpReward:
            type: integer
            format: int32
            description: The XP reward for this method of obtaining XP.
          cost:
            type: array
            description: The cost for this method of obtaining XP.
            items:
              $ref: '#/components/schemas/ItemCost'
        required:
          - xpReward
          - cost
    Trait:
      title: Trait
      description: 'If traitFormat=id, just the ID string. Otherwise, the full Trait object.'
      oneOf:
        - type: string
          description: The trait ID.
          example: TraitId-or-TraitObject
        - type: object
          properties:
            id:
              type: string
              description: The trait ID.
            name:
              type: string
              description: (localized)
            alwaysInvisible:
              type: boolean
              description: ''
              default: false
            isEvent:
              type: boolean
              description: ''
              default: false
    Item:
      title: Item
      description: 'If itemFormat=id, just the ID string. Otherwise, the full Item object.'
      oneOf:
        - type: string
          description: The item ID.
          example: ItemId-or-ItemObject
        - type: object
          properties:
            id:
              type: string
              description: The item ID.
            name:
              type: string
              description: (localized)
            description:
              type: string
              description: (localized)
            icon:
              $ref: '#/components/schemas/URL'
            noInv:
              type: boolean
              description: 'If `true`, the item cannot be owned in the inventory.'
              default: false
            noDeco:
              type: boolean
              description: 'If `true`, the item does not use decorations.'
              default: false
            isCalendar:
              type: boolean
              description: 'If `true`, the item is a calendar.'
              default: false
            isOrb:
              type: boolean
              description: 'If `true`, the item is an orb.'
              default: false
            characterId:
              type: string
              example: AimControl_Infect
              description: Used for shard/star items only.
            stats:
              allOf:
                - $ref: '#/components/schemas/Stats'
              description: Used for gear only.
            tier:
              type: integer
              format: int32
              description: Used for gear only.
            directCost:
              type: array
              description: Cost to craft this item in next-largest units. Used for gear only.
              items:
                $ref: '#/components/schemas/ItemCost'
            flatCost:
              type: array
              description: Cost to craft this item in smallest units. Used for gear only.
              items:
                $ref: '#/components/schemas/ItemCost'
            shopArt:
              allOf:
                - $ref: '#/components/schemas/URL'
              description: 'For costumes, the art used for this item in the in-game shop. (Omitted if no art is available.)'
            fullArt:
              allOf:
                - $ref: '#/components/schemas/URL'
              description: 'For costumes, a full-body image of the costume, if available.'
    ItemCost:
      title: ItemCost
      type: object
      description: A cost as a quantity of items.
      properties:
        item:
          $ref: '#/components/schemas/Item'
        quantity:
          type: integer
          format: int32
          default: 1
          description: Quantity of items.
    ItemQuantity:
      title: ItemQuantity
      type: object
      description: |-
        A quantity of items (used for rewards).

        Contains at most one of `item`, `oneOf`, `allOf`, or `chanceOf`.

        The meaning is as follows:
        - `item` indicates that particular item.
        - `oneOf` indicates a package containing a random weighted selection from among its children.
        - `allOf` indicates a package containing all of its children.
        - `chanceOf` indicates a package which has a chance of containing its child.

        If the ItemQuantity object contains none of those four, it represents an empty package.
      properties:
        item:
          $ref: '#/components/schemas/Item'
        oneOf:
          type: array
          items:
            $ref: '#/components/schemas/ItemQuantity'
        allOf:
          type: array
          items:
            $ref: '#/components/schemas/ItemQuantity'
        chanceOf:
          $ref: '#/components/schemas/ItemQuantity'
        quantity:
          type: integer
          format: int32
          default: 1
          description: 'The quantity of the item. (Not used for`oneOf`, `allOf`, or `chanceOf`.)'
        maxQuantity:
          type: integer
          format: int32
          description: 'If present, indicates a range of possible quantities, from `quantity` to `maxQuantity`.'
        weight:
          type: integer
          format: int32
          default: 1
          description: Reflects how often this ItemQuantity object is picked from among its siblings. (Only used for children of `oneOf`.)
        pulls:
          type: integer
          format: int32
          default: 1
          description: 'In the case of `oneOf` or `chanceOf`, indicates how many times the package is rolled/opened. Each pull can yield a different result.'
    Stats:
      title: Stats
      description: A set of stats.
      oneOf:
        - type: string
          description: The stats in CSV format.
          example: StatsCsv-or-StatsObject
        - type: object
          properties:
            health:
              type: integer
              format: int32
              default: 0
            damage:
              type: integer
              format: int32
              default: 0
            armor:
              type: integer
              format: int32
              default: 0
            focus:
              type: integer
              format: int32
              default: 0
            resist:
              type: integer
              format: int32
              default: 0
            critDamageBonus:
              type: integer
              format: int32
              default: 0
              description: (%)
            critChance:
              type: integer
              format: int32
              default: 0
              description: (%)
            speed:
              type: integer
              format: int32
              default: 0
            dodgeChance:
              type: integer
              format: int32
              default: 0
              description: (%)
            blockChance:
              type: integer
              format: int32
              default: 0
              description: (%)
            blockAmount:
              type: integer
              format: int32
              default: 0
              description: (%)
            accuracy:
              type: integer
              format: int32
              default: 0
              description: (%)
            damageReduction:
              type: integer
              format: int32
              default: 0
              description: (%)
            extraHeal:
              type: integer
              format: int32
              default: 0
              description: (%)
    StatBoost:
      title: Stat Boost
      description: A boost to stats.
      oneOf:
        - type: string
          description: 'The stats in CSV format, in the same order.'
          example: StatsCsv-or-StatsObject
        - type: object
          properties:
            health:
              type: integer
              format: int32
              default: 0
              description: (% boost to original value)
            damage:
              type: integer
              format: int32
              default: 0
              description: (% boost to original value)
            armor:
              type: integer
              format: int32
              default: 0
              description: (% boost to original value)
            focus:
              type: integer
              format: int32
              default: 0
              description: (% boost to original value)
            resist:
              type: integer
              format: int32
              default: 0
              description: (% boost to original value)
            critDamageBonus:
              type: integer
              format: int32
              default: 0
              description: (% boost to original value)
            critChance:
              type: integer
              format: int32
              default: 0
              description: (% boost to original value)
            speed:
              type: integer
              format: int32
              default: 0
              description: (% boost to original value)
            dodgeChance:
              type: integer
              format: int32
              default: 0
              description: (% boost to original value)
            blockChance:
              type: integer
              format: int32
              default: 0
              description: (% boost to original value)
            blockAmount:
              type: integer
              format: int32
              default: 0
              description: (% boost to original value)
            accuracy:
              type: integer
              format: int32
              default: 0
              description: (% boost to original value)
            damageReduction:
              type: integer
              format: int32
              default: 0
              description: '(flat %, adds to original value)'
    WarContext:
      type: string
      title: WarContext
      description: |-
        A war context used for calculating boosts. (Default: no war boosts.)

        Format:
          `{attack or defend};{own helicarrier};{enemy helicarrier};{battle room}` (irrelevant trailing segments may be omitted)

        Helicarriers:
          12 room codes (from the list below) for the layout of the helicarrier, left-to-right, then top-to-bottom. (If fewer than 12 room codes are provided, it is padded at the end with defeated rooms.)
          - `A` Armory
          - `B` Barracks
          - `C` Cargo Bay
          - `E` Engineering
          - `G` bridGe
          - `H` Hangar
          - `M` Med Bay
          - `R` Reactor
          - `S` Security
          - `X` Flight Deck 1
          - `Y` Flight Deck 2
          - `Z` Flight Deck 3
          - `-` Defeated Room

        Battle Room:
          The number from `1` to `12` (numbered left-to-right, then top-to-bottom) of the room in which the battle is taking place. For attacks, the room is in the enemy's helicarrier. For defends, the room is in the character's own helicarrier.

        Example:
          `attack:X-ZSRMHGEABC:XYZREGHSCBMA:5` represents an attack on the enemy's Engineering room, after the character's own Flight Deck 2 has been defeated.
    Iso8:
      title: Iso8
      description: Represents the ISO-8 of a character.
      oneOf:
        - type: string
          description: 'The Iso8 in CSV format, in the same order.'
          example: Iso8Csv-or-Iso8Object
        - type: object
          properties:
            matrix:
              type: string
              description: 'The matrix tier. Defaults to green, if omitted.'
              enum:
                - green
                - blue
            health:
              type: integer
              format: int32
              default: 0
              description: (pips equipped)
              minimum: 0
              maximum: 5
            damage:
              type: integer
              format: int32
              default: 0
              description: (pips equipped)
              minimum: 0
              maximum: 5
            armor:
              type: integer
              format: int32
              default: 0
              description: (pips equipped)
              minimum: 0
              maximum: 5
            focus:
              type: integer
              format: int32
              default: 0
              description: (pips equipped)
              minimum: 0
              maximum: 5
            resist:
              type: integer
              format: int32
              default: 0
              description: (pips equipped)
              minimum: 0
              maximum: 5
            active:
              type: string
              description: 'Active class id, omitted if no active class.'
              enum:
                - striker
                - fortifier
                - healer
                - skirmisher
                - raider
            striker:
              type: integer
              format: int32
              default: 0
              description: (class level)
              minimum: 0
            fortifier:
              type: integer
              format: int32
              default: 0
              description: (class level)
              minimum: 0
            healer:
              type: integer
              format: int32
              default: 0
              description: (class level)
              minimum: 0
            skirmisher:
              type: integer
              format: int32
              default: 0
              description: (class level)
              minimum: 0
            raider:
              type: integer
              format: int32
              default: 0
              description: (class level)
              minimum: 0
    IndexedItems:
      title: IndexedItems
      description: Object mapping numbers (*e.g.* costume numbers) (starting at 1) to Item objects.
      type: object
      properties:
        '#':
          $ref: '#/components/schemas/Item'
      additionalProperties:
        $ref: '#/components/schemas/Item'
    IndexedAbilityLevels:
      title: IndexedAbilityLevels
      description: Object mapping level numbers (starting at 1) to AbilityLevel objects.
      type: object
      properties:
        '#':
          $ref: '#/components/schemas/AbilityLevel'
      additionalProperties:
        $ref: '#/components/schemas/AbilityLevel'
    IndexedObjectiveTiers:
      title: IndexedObjectiveTiers
      description: |-
        Object mapping objective tier numbers to ObjectiveTier objects.

        `rewards` in each tier are additive (*i.e.* you can collect rewards for the highest tier you reach and each lower tier).

        `raidRewards` in each tier are not additive (*i.e.* you can only collect rewards for the highest tier you reach by the end of the raid).
      type: object
      properties:
        '#':
          $ref: '#/components/schemas/ObjectiveTier'
      additionalProperties:
        $ref: '#/components/schemas/ObjectiveTier'
    IndexedGearTiers:
      title: IndexedGearTiers
      description: Object mapping tier numbers (starting at 1) to GearTier objects.
      type: object
      properties:
        '#':
          $ref: '#/components/schemas/GearTier'
      additionalProperties:
        $ref: '#/components/schemas/GearTier'
    IndexedCosts:
      title: IndexedCosts
      description: Object mapping level numbers or tier numbers (starting at 1) to costs.
      type: object
      properties:
        '#':
          type: array
          description: The cost associated with this level or tier.
          items:
            $ref: '#/components/schemas/ItemCost'
      additionalProperties:
        type: array
        description: The cost associated with this level or tier.
        items:
          $ref: '#/components/schemas/ItemCost'
    IndexedShards:
      title: IndexedShards
      description: Object mapping yellow stars (starting at 1) to shards required.
      type: object
      properties:
        '#':
          type: integer
          format: int32
          description: The shards required for this many yellow stars.
      additionalProperties:
        type: integer
        format: int32
        description: The shards required for this many yellow stars.
    IndexedLevelRequirements:
      title: IndexedLevelRequirements
      description: Object mapping level numbers or tier numbers (starting at 1) to level requirements.
      type: object
      properties:
        '#':
          type: integer
          format: int32
          description: The level requirement for this level or tier.
      additionalProperties:
        type: integer
        format: int32
        description: The level requirement for this level or tier.
    IndexedChapterInfos:
      title: IndexedChapterInfos
      description: Object mapping chapter numbers (starting at 1) to ChapterInfo objects.
      type: object
      properties:
        '#':
          $ref: '#/components/schemas/ChapterInfo'
      additionalProperties:
        $ref: '#/components/schemas/ChapterInfo'
    IndexedRaidDifficultyInfos:
      title: IndexedRaidDifficultyInfos
      description: Object mapping difficulty numbers (starting at 1) to RaidDifficultyInfo objects.
      type: object
      properties:
        '#':
          $ref: '#/components/schemas/RaidDifficultyInfo'
      additionalProperties:
        $ref: '#/components/schemas/RaidDifficultyInfo'
    IndexedNodeInfos:
      title: IndexedNodeInfos
      description: Object mapping tier numbers (starting at 1) to NodeInfo objects.
      type: object
      properties:
        '#':
          $ref: '#/components/schemas/NodeInfo'
      additionalProperties:
        $ref: '#/components/schemas/NodeInfo'
    MappedNodeInfos:
      title: MappedNodeInfos
      description: Object mapping `roomId`s to NodeInfo objects.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/NodeInfo'
      properties:
        X#:
          $ref: '#/components/schemas/NodeInfo'
    MappedRewards:
      title: MappedRewards
      description: Object mapping `rewardType`s (*e.g.* `standard` or `boss`) to ItemQuantity objects.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ItemQuantity'
      properties:
        xxxxxxxx:
          $ref: '#/components/schemas/ItemQuantity'
    Iso8ClassFuseCosts:
      title: Iso8ClassFuseCosts
      type: object
      description: The fuse costs for this class.
      properties:
        armor:
          $ref: '#/components/schemas/IndexedCosts'
        resist:
          $ref: '#/components/schemas/IndexedCosts'
        health:
          $ref: '#/components/schemas/IndexedCosts'
        focus:
          $ref: '#/components/schemas/IndexedCosts'
        damage:
          $ref: '#/components/schemas/IndexedCosts'
    AbilityLevel:
      title: AbilityLevel
      type: object
      description: Information about one level of an ability.
      properties:
        description:
          type: string
          description: (localized)
        nextUpgrade:
          type: string
          description: (localized) The bonuses of upgrading from this level to the next one.
        startEnergy:
          type: integer
          format: int32
          default: 2
          description: How much energy the ability starts with.
        costEnergy:
          type: integer
          format: int32
          default: 0
          description: How much energy the ability costs to use.
        nextUpgradeCosts:
          type: array
          description: The cost to upgrade to the next ability level (if it differs from the default ability upgrade costs)
          items:
            $ref: '#/components/schemas/ItemCost'
    AbilityEnergy:
      title: AbilityEnergy
      type: object
      description: Energy settings for an ability.
      properties:
        startEnergy:
          type: integer
          format: int32
          description: 'How much energy the ability starts with. (Default: no override.)'
        costEnergy:
          type: integer
          format: int32
          description: 'How much energy the ability costs to use. (Default: no override.)'
    Ability:
      title: Ability
      type: object
      description: Information about an ability.
      properties:
        name:
          type: string
          description: (localized)
        icon:
          $ref: '#/components/schemas/URL'
        icons:
          type: array
          description: 'For ISO Classes, [0] is the class icon on its own, [1] is for tier 1 of the class, [2] is for tier 2 of the class, and so on.'
          items:
            $ref: '#/components/schemas/URL'
        levels:
          $ref: '#/components/schemas/IndexedAbilityLevels'
    AbilityKit:
      title: AbilityKit
      type: object
      description: A kit of character abilities.
      properties:
        basic:
          $ref: '#/components/schemas/Ability'
        special:
          $ref: '#/components/schemas/Ability'
        ultimate:
          $ref: '#/components/schemas/Ability'
        passive:
          $ref: '#/components/schemas/Ability'
    GearSlot:
      title: GearSlot
      type: object
      description: Information about a gear slot.
      properties:
        level:
          type: integer
          format: int32
          description: Character level required to equip the piece to this slot.
        piece:
          $ref: '#/components/schemas/Item'
    GearTier:
      title: GearTier
      type: object
      description: Information about a tier of gear for a character.
      properties:
        stats:
          allOf:
            - $ref: '#/components/schemas/Stats'
          description: The stats that this tier of gear contributes to the character before any of the subsequent slots are equipped.
        slots:
          type: array
          description: 'Slots equippable in this tier, needed to advance to the next tier. Slots are listed in order, top to bottom on the left, then top to bottom on the right.'
          items:
            $ref: '#/components/schemas/GearSlot'
    CharacterInfo:
      title: CharacterInfo
      type: object
      description: Information about a character.
      properties:
        id:
          type: string
          example: AimControl_Infect
        mission:
          type: boolean
          description: 'True if this information is about the mission variant of a character. Note that neither ability kits nor gear slots are available for mission variants, nor can they generally be assumed to be the same as the player variants of a character.'
        name:
          type: string
          description: (localized)
        description:
          type: string
          description: (localized)
        portrait:
          $ref: '#/components/schemas/URL'
        starItems:
          type: array
          description: |-
            Index 0 is the yellow star shard item.
            Indices 1-7 are the respective red star items.
            Indices 8-10 are the 1-3 diamond items, respectively.
          items:
            $ref: '#/components/schemas/Item'
        costumes:
          $ref: '#/components/schemas/IndexedItems'
        status:
          type: string
          enum:
            - playable
            - summon
            - war
            - operator
            - nue
            - model
            - unplayable
            - other
            - unknown
          description: |-
            Indicates the status of the character.
            "playable" = Appears in the roster.
            "summon" = Summoned by another character.
            "war" = Available in war only.
            "operator" = Used by either side to progress various missions.
            "nue" = Used for guided experiences.
            "model" = Art only.
            "unplayable" = Cannot be controlled by players in any way.
            "other" = Doesn't fit into any of the other categories.
            "unknown" = Uncategorized, in development, and/or subject to change before release.
        unlockStars:
          type: integer
          minimum: 1
          maximum: 7
          format: int32
          description: Yellow stars needed to unlock the character.
        traits:
          type: array
          description: 'Traits that show in the roster, exclusive of event traits.'
          items:
            $ref: '#/components/schemas/Trait'
        invisibleTraits:
          type: array
          description: Traits that do not show in the roster.
          items:
            $ref: '#/components/schemas/Trait'
        eventTraits:
          type: array
          description: Traits relevant to events.
          items:
            $ref: '#/components/schemas/Trait'
        summonIds:
          type: array
          description: Ids of any characters summoned by this character. (Omitted for non-summoners.)
          items:
            type: string
        summonByIds:
          type: array
          description: Ids of any characters that summon this character. (Omitted for non-summons.)
          items:
            type: string
        abilityKit:
          $ref: '#/components/schemas/AbilityKit'
        empoweredAbilityKit:
          $ref: '#/components/schemas/AbilityKit'
        gearTiers:
          $ref: '#/components/schemas/IndexedGearTiers'
        iso8ClassAdoption:
          type: object
          description: ISO-8 Class adoption percentages.
          properties:
            fortifier:
              type: number
            healer:
              type: number
            skirmisher:
              type: number
            raider:
              type: number
            striker:
              type: number
        abilityAdoption:
          type: object
          description: T4 Ability adoption percentages.
          properties:
            basic:
              type: number
            passive:
              type: number
            special:
              type: number
            ultimate:
              type: number
    CharacterInstance:
      title: CharacterInstance
      type: object
      description: 'An instance of a character (for example, a particular character in a roster, a particular enemy on a raid node, etc.).'
      properties:
        id:
          type: string
          example: AimControl_Infect
        mission:
          type: boolean
          description: 'True if this information is about the mission variant of a character. Note that neither ability kits nor gear slots are available for mission variants, nor can they generally be assumed to be the same as the player variants of a character.'
        level:
          type: integer
          format: int32
          minimum: 1
          description: Character level. Omitted for locked characters.
        activeYellow:
          type: integer
          maximum: 7
          minimum: 1
          description: Active yellow stars. Omitted for locked characters.
          format: int32
        activeRed:
          type: integer
          minimum: 0
          maximum: 10
          description: Active red stars. Values 8-10 represent 1-3 diamonds, respectively. Red stars or diamonds that have not been activated are not included. Omitted for locked characters.
          format: int32
        costume:
          type: integer
          minimum: 1
          description: Costume number of equipped costume. Omitted if no costume is equipped.
          format: int32
        gearTier:
          type: integer
          minimum: 1
          description: Gear tier. Omitted for locked characters.
          format: int32
        gearSlots:
          type: array
          minItems: 6
          maxItems: 6
          description: 'Gear slots (equipped = true), top to bottom on the left, then the right. Omitted for locked characters.'
          items:
            type: boolean
        basic:
          type: integer
          maximum: 7
          minimum: 1
          description: Basic ability level. Omitted for locked characters.
          format: int32
        special:
          type: integer
          minimum: 0
          maximum: 7
          default: 0
          description: Special ability level.
          format: int32
        ultimate:
          type: integer
          minimum: 0
          maximum: 7
          default: 0
          description: Ultimate ability level.
          format: int32
        passive:
          type: integer
          minimum: 0
          maximum: 5
          default: 0
          description: Passive ability level.
          format: int32
        iso8:
          $ref: '#/components/schemas/Iso8'
        starkBoost:
          $ref: '#/components/schemas/StatBoost'
        war:
          $ref: '#/components/schemas/WarContext'
        nodeEffects:
          $ref: '#/components/schemas/NodeEffects'
        difficultyBoost:
          $ref: '#/components/schemas/StatBoost'
        stats:
          allOf:
            - $ref: '#/components/schemas/Stats'
          description: 'The character''s base stats for combat purposes (**after** applying all equipped gears, stars, ISO-8, stark tech, and war/difficulty/node effects but **before** applying any passive abilities or combat buffs or debuffs).'
        sheetStats:
          allOf:
            - $ref: '#/components/schemas/Stats'
          description: The character's stats as seen on the character sheet (including select passive abilities). Only available for non-mission characters.
        power:
          type: integer
          minimum: 1
          description: The character's power or approximate power. Omitted for locked characters.
          format: int32
        favorite:
          type: boolean
          description: Whether the character is marked as favorite by the player
        draftFavorite:
          type: boolean
          description: Wehther the character is marked as VS Battle favorite by the player
        info:
          $ref: '#/components/schemas/CharacterInfo'
    NodeEffects:
      title: NodeEffects
      type: object
      description: Describes effects on a character specific to a particular node. Any omitted value means that effect is not applied.
      properties:
        x:
          type: integer
          minimum: 0
          maximum: 4
          description: 'The character''s preferred x position on the battlefield, 0 being their own far left, 4 being their own far right.'
          format: int32
        'y':
          type: integer
          minimum: 0
          maximum: 1
          description: 'The character''s preferred y position on the battlefield, 0 being the back row, 1 being the front row.'
          format: int32
        target:
          type: boolean
          description: True if this character is marked as a target.
        vip:
          type: boolean
          description: True if this character is considered a VIP for controlling combat waves.
        autoPlay:
          type: boolean
          description: 'True if players cannot control this character, even when it''s on their own side.'
        gearPercent:
          type: integer
          minimum: 0
          maximum: 100
          default: 0
          description: Additional fractional gear tier from node effects.
          format: int32
        boosts:
          $ref: '#/components/schemas/StatBoost'
        specialOverride:
          $ref: '#/components/schemas/AbilityEnergy'
        ultimateOverride:
          $ref: '#/components/schemas/AbilityEnergy'
        empoweredSpecialOverride:
          $ref: '#/components/schemas/AbilityEnergy'
        empoweredUltimateOverride:
          $ref: '#/components/schemas/AbilityEnergy'
        currentHealthPercent:
          type: integer
          minimum: 0
          maximum: 100
          default: 100
          format: int32
    Meta:
      title: Meta
      type: object
      description: Contains meta-information about the response.
      properties:
        version:
          type: integer
          enum:
            - 1
          example: 1
          exclusiveMinimum: false
          minimum: 1
          maximum: 1
          description: The version of the API. Currently 1.
          format: int32
        hashes:
          type: object
          description: |-
            These hashes will change when the underlying **non-player** data returnable by the API changes.

            If the hash value pertinent to a response is cached with the response, finding a different value for that hash on a future response can be used to invalidate the previously cached response.

            For example, if a request for CITY characters returns a "chars" hash of "6b4" and a later request for an alpha raid node returns a "chars" hash of "6b4", there is no need to refresh the list of CITY characters. However, if the later request for an alpha raid node returns a "chars" hash of "1b8", then the list of CITY characters has potentially been updated.
          properties:
            events:
              type: string
              description: 'Changes whenever an event is updated or a new event starts or stops, including daily milestones.'
            drops:
              type: string
              description: 'Changes whenever any drops (from nodes, orbs, or offers) change.'
            locs:
              type: string
              description: Changes whenever localized strings are updated.
            nodes:
              type: string
              description: |-
                Changes whenever any nodes (raid, dark dimension, campaigns, legendary events, event campaigns, challenges, flash events, etc., etc.) change or become active or inactive.

                Note that some nodes (like Greek raids) may remain available via the API even when not available in game. In these cases, the data available via the API might not change, even though this value does.

                Note, also, that some nodes (like event campaigns) may be conditional on events running. In these cases, the data available via the API might change, even though this value does not.
            chars:
              type: string
              description: 'Changes whenever characters are updated or new characters are added. This includes gear, abilities, ISO-8, etc.'
            other:
              type: string
              description: 'Changes whenever anything not categorized above changes. Currently, this includes things like event art and war bonuses.'
            all:
              type: string
              description: Changes whenever anything changes.
        page:
          type: integer
          description: |-
            For paged results, indicates the page number of the returned results, with `1` being the first page.

            For results numbered `1` through `perTotal`, page `n` will contain results numbered `(perPage * (n - 1)) + 1` through `perPage * n`.
          format: int32
        perPage:
          type: integer
          description: 'For paged results, indicates the number of results per page.'
          format: int32
        perTotal:
          type: integer
          description: 'For paged results, indicates the total number of results across all pages.'
          format: int32
        refreshAt:
          $ref: '#/components/schemas/DateTime'
        asOf:
          type: string
          description: A value that can be passed to a future request's `since` parameter to identify the current response.
    TeamOrder:
      title: TeamOrder
      type: object
      description: The team order information about a given squad.
      properties:
        squad:
          $ref: '#/components/schemas/Squad'
        total:
          type: integer
          format: int32
          description: The total number of times the ordering of the squad has occurred.
    InfoCode:
      title: InfoCode
      type: object
      description: |-
        An info code.

        344 `UNCHANGED` - Indicates that no new data is available since the response indicated by the `since` parameter of the request.
      properties:
        code:
          type: integer
          description: The HTTP status code for the info code.
          enum:
            - 344
          format: int32
        subcode:
          type: string
          description: The subcode string identifying a particular info code.
          enum:
            - UNCHANGED
        message:
          type: string
          description: A human-readable message describing the info code.
    InfoCodeResponse:
      title: InfoCodeResponse
      type: object
      description: 'An info code response, including both an InfoCode Object and a Meta Object.'
      properties:
        data:
          $ref: '#/components/schemas/InfoCode'
        meta:
          $ref: '#/components/schemas/Meta'
    Error:
      title: Error
      type: object
      description: |-
        An error.

        400 `BAD_REQUEST` - This is a catchall for unknown situations that are the fault of the request. The request should be tried again only after being corrected.

        404 `NOT_FOUND` - The requested resource could not be found.

        422 `PROHIBITED_VALUE` - One or more of the parameters of the request had a value that was not allowed. This could be a parameter by itself (such as asking for level 900) or a parameter in the context of other parameters (such as asking for gear tier 15 for a level 9 character).

        472 `RESPONSE_TOO_LARGE` - The query is expected to produce a response that is too large. Try specifying parameters in the query to reduce the estimated response size.

        474 `BANNED` - The request could not be completed because the requesting player is banned.

        500 `INTERNAL_SERVER_ERROR` - This is a catchall for unknown situations that are the fault of the server. You may try the request again later. If the issue persists, please report it.

        552 `RESTARTING` - The server is restarting and cannot yet provide a full response to requests. Try again later.

        553 `MAINTENANCE` - The server is currently in maintenance and cannot provide a full response to requests. Try again later.
      properties:
        code:
          type: integer
          description: The HTTP status code for the error.
          enum:
            - 400
            - 404
            - 422
            - 472
            - 474
            - 500
            - 552
            - 553
          format: int32
        subcode:
          type: string
          description: The subcode string identifying a particular error.
          enum:
            - BAD_REQUEST
            - NOT_FOUND
            - PROHIBITED_VALUE
            - RESPONSE_TOO_LARGE
            - BANNED
            - INTERNAL_SERVER_ERROR
            - RESTARTING
            - MAINTENANCE
        message:
          type: string
          description: A human-readable message describing the error.
        field:
          type: string
          description: The field of the request that triggered the `NOT_FOUND` or `PROHIBITED_VALUE` error.
        length:
          type: integer
          description: The estimated length of the response subject to the `RESPONSE_TOO_LARGE` error.
          format: int32
        maxLength:
          type: integer
          description: The maximum length of a response for this endpoint (used with the `RESPONSE_TOO_LARGE` error).
          format: int32
    ErrorResponse:
      title: ErrorResponse
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
        meta:
          $ref: '#/components/schemas/Meta'
      description: |-
        An error response, including both an Error Object and a Meta Object.

        Please note that meta hashes will not be available for `RESTARTING` errors and may not be available for other `5xx`-level errors.
    CombatObjectives:
      title: CombatObjectives
      type: object
      description: 'Describes a side''s combat objectives. Achieving any one of the objectives is considered victory for that side. If the CombatObjectives object is omitted, victory is achieved if all enemies are dead. Otherwise, depending on which objective is achieved, the corresponding `endStoryId` is triggered.'
      properties:
        killAll:
          type: object
          description: Achieved if all enemies are dead.
          properties:
            endStoryId:
              $ref: '#/components/schemas/StoryId'
            endStory:
              $ref: '#/components/schemas/Story'
        killTarget:
          type: object
          description: Achieved if all enemies with the `target` NodeEffect are dead.
          properties:
            endStoryId:
              $ref: '#/components/schemas/StoryId'
            endStory:
              $ref: '#/components/schemas/Story'
        woundTarget:
          type: object
          description: Achieved if all enemies with the `target` NodeEffect have less than `healthPercent`% health.
          properties:
            endStoryId:
              $ref: '#/components/schemas/StoryId'
            endStory:
              $ref: '#/components/schemas/Story'
            healthPercent:
              type: integer
              format: int32
        timer:
          type: object
          description: Achieved if the timer expires.
          properties:
            endStoryId:
              $ref: '#/components/schemas/StoryId'
            endStory:
              $ref: '#/components/schemas/Story'
            minutes:
              type: integer
              format: int32
            seconds:
              type: integer
              format: int32
        operator:
          type: object
          description: Achieved on the next operator turn after all `operatorStoryIds` have been played (one per operator turn).
          properties:
            endStoryId:
              $ref: '#/components/schemas/StoryId'
            endStory:
              $ref: '#/components/schemas/Story'
            operatorStoryIds:
              type: array
              items:
                $ref: '#/components/schemas/StoryId'
            operatorStories:
              type: array
              items:
                $ref: '#/components/schemas/Story'
        other:
          type: boolean
          description: 'If true, achieved after other, unspecified conditions.'
    StoryId:
      type: string
      title: StoryId
      description: 'A Story Id. Can be imperfectly mapped to `/localizations/dialog` using `ID_DIALOG_${storyId}_${index}` where index goes from `0` to however many lines there are in the story. The design for this information is incomplete.'
      deprecated: true
    CombatWave:
      title: CombatWave
      type: object
      description: Represents a combat wave.
      properties:
        onFewerThan:
          type: integer
          format: int32
          description: 'When the number of units on the side drops below this number, trigger the wave. If omitted, the wave is triggered regardless of the number of units on the side.'
        waveStoryId:
          $ref: '#/components/schemas/StoryId'
        waveStory:
          $ref: '#/components/schemas/Story'
        maxSpawnPerTick:
          type: integer
          format: int32
          description: 'The maximum number of units to spawn each time this combat wave is triggered. If omitted, there is no maximum.'
        units:
          type: array
          description: The units in this combat wave.
          items:
            oneOf:
              - $ref: '#/components/schemas/CharacterInstance'
              - type: array
                description: 'This option is used when in a raid with difficulties and no difficulty is specified in the request. In that case [0] represents the normal difficulty character, [1] represents the difficulty 1 character, and so on.'
                items:
                  $ref: '#/components/schemas/CharacterInstance'
        turnMeter:
          type: integer
          format: int32
          description: 'How much turn meter to give to units in this wave when they spawn, `1000` being a full turn. Defaults to `0`.'
          default: 0
        holdNextWaveUntil:
          type: string
          enum:
            - OwnDeadThisWave
            - AllOwnDeadThisWave
            - AllOwnDeadThisCombat
            - AnyVipKilled
            - AllOwnVipKilled
            - AnyVipDoesBasic
            - AnyVipDoesSpecial
            - AnyVipDoesUltimate
            - OwnActionsThisWave
            - OwnActionsThisCombat
            - EnemyActionsThisCombat
          description: |-
            Does not progress to the next combat wave until the condition is met.
            - `OwnDeadThisWave` Met if `holdNum` units from this combat wave are dead.
            - `AllOwnDeadThisWave` Met if all of the units from this combat wave are dead.
            - `AllOwnDeadThisCombat` Met if the side has no units remaining, from this or any other combat wave.
            - `AnyVipKilled` Met after any unit with the `vip` NodeEffect is killed.
            - `AllOwnVipKilled` Met after all units with the `vip` NodeEffect are killed on the side.
            - `AnyVipDoesBasic` Met after any unit with the `vip` NodeEffect performs their basic ability.
            - `AnyVipDoesSpecial` Met after any unit with the `vip` NodeEffect performs their special ability.
            - `AnyVipDoesUltimate` Met after any unit with the `vip` NodeEffect performs their ultimate ability.
            - `OwnActionsThisWave` Met after `holdNum` actions have been performed by units on the side since the combat wave was first triggered.
            - `OwnActionsThisCombat` Met after `holdNum` actions have been performed by units on the side since the start of combat.
            - `EnemyActionsThisCombat` Met after `holdNum` actions have been performed by units on the enemy side since the start of combat.
        holdNum:
          type: integer
          format: int32
          description: 'When relevant for the value of `holdNextWaveUntil`, specifies the relevant number to hold the next wave for.'
    NodeCombatSide:
      title: NodeCombatSide
      type: object
      description: Represents a side in combat.
      properties:
        anyObjectives:
          $ref: '#/components/schemas/CombatObjectives'
        waves:
          type: array
          description: 'The combat waves for this side, in order. The `waveStoryId` for each combat wave is played the first time that combat wave is triggered.'
          items:
            $ref: '#/components/schemas/CombatWave'
    NodeCombat:
      title: NodeCombat
      type: object
      description: Describes combat that can occur at a particular node.
      properties:
        map:
          type: object
          description: The design for this information is incomplete.
          deprecated: true
          properties:
            id:
              type: string
              description: The id of the environment where the combat occurs.
            timeOfDay:
              type: string
              description: The id of the time of day when the combat occurs.
        left:
          $ref: '#/components/schemas/NodeCombatSide'
        right:
          $ref: '#/components/schemas/NodeCombatSide'
    NodeCompletion:
      title: NodeCompletion
      type: object
      description: Represents a degree of completion of a node.
      properties:
        type:
          type: string
          enum:
            - campaign
            - eventCampaign
            - challenge
            - other
          description: |-
            The type of node.
            - `campaign` A campaign node.
            - `eventCampaign` An event campaign node.
            - `challenge` A challenge node.
            - `other` Another kind of node.
        id:
          type: string
          description: 'For episodic types, the `episodicId` of the episodic containing the node.'
        chapter:
          type: integer
          description: 'For episodic types, the `chapterId` of the chapter in the episodic containing the node.'
          format: int32
        tier:
          type: integer
          description: 'For episodic types, the `tierId` of the node within the chapter of the episodic.'
          format: int32
        completionStars:
          type: integer
          format: int32
          description: The number of stars of completion.
    OtherRequirements:
      title: OtherRequirements
      type: object
      description: Represents non-character requirements.
      properties:
        anyDaysOfWeek:
          type: array
          description: Must be one of the specified days of the week. Days of the week are represented `0` (Sunday) through `6` (Saturday).
          items:
            type: integer
            format: int32
            minimum: 0
            maximum: 6
        playerLevel:
          type: integer
          format: int32
          description: Minimum player level.
        allNodeCompletions:
          type: array
          description: Must have completed all the specified nodes to the specified degree of completion.
          items:
            $ref: '#/components/schemas/NodeCompletion'
    CharacterFilter:
      title: CharacterFilter
      type: object
      description: Represents requirements on an instance of a character. The character instance must satisfy each of the contained requirements to match this filter.
      properties:
        allTraits:
          type: array
          description: The character instance must have each of these traits.
          items:
            $ref: '#/components/schemas/Trait'
        anyTraits:
          type: array
          description: The character instance must have at least one of these traits.
          items:
            $ref: '#/components/schemas/Trait'
        exceptTraits:
          type: array
          description: The character instance must *not* have any of these traits.
          items:
            $ref: '#/components/schemas/Trait'
        anyCharacters:
          type: array
          description: The character instance must be one of these characters.
          items:
            type: string
            example: AimControl_Infect
        level:
          type: integer
          format: int32
          description: Minimum character level.
        activeYellow:
          type: integer
          description: Minimum number of active yellow stars.
          format: int32
        activeRed:
          type: integer
          description: Minimum number of active red stars.
          format: int32
        gearTier:
          type: integer
          description: Minimum gear tier.
          format: int32
        iso8Class:
          type: string
          enum:
            - striker
            - fortifier
            - healer
            - skirmisher
            - raider
          description: Required ISO-8 class.
        iso8ClassLevel:
          type: integer
          description: Minimum level required of equipped ISO-8 class.
          format: int32
    Requirements:
      title: Requirements
      type: object
      description: Represents requirements.
      properties:
        missionCharacters:
          type: boolean
          description: 'If `true`, only mission characters are allowed.'
        minCharacters:
          type: integer
          format: int32
          description: Minimum number of characters required.
          default: 1
        maxCharacters:
          type: integer
          format: int32
          default: 5
          description: Maximum number of characters allowed.
        anyCharacterFilters:
          type: array
          description: 'Different character instances can match different filters, but each character instance must satisfy *all* of the requirements in *at least one* of these filters.'
          items:
            $ref: '#/components/schemas/CharacterFilter'
        specificCharacters:
          type: array
          description: All of these characters are required.
          items:
            type: string
            example: AimControl_Infect
        otherRequirements:
          $ref: '#/components/schemas/OtherRequirements'
    NodeInfo:
      title: NodeInfo
      type: object
      description: Information about a node. The `introStoryId` is played before character select at that node.
      properties:
        name:
          type: string
          description: (localized)
        subName:
          $ref: '#/components/schemas/SubName'
        details:
          $ref: '#/components/schemas/Details'
        icon:
          $ref: '#/components/schemas/URL'
        isBoss:
          type: boolean
          description: True if the node is a boss or mini-boss node.
        roomNW:
          type: string
          description: The `roomId` of the room reachable from this node by leaving in the northwest direction. (This is the room at the same depth in the previous ray.) Omitted if travel from this room to that room is not possible.
        roomNE:
          type: string
          description: The `roomId` of the room reachable from this node by leaving in the northeast direction. (This is the room that is one deeper in the same ray.) Omitted if travel from this room to that room is not possible.
        roomSE:
          type: string
          description: The `roomId` of the room reachable from this node by leaving in the southeast direction. (This is the room at the same depth in the next ray.) Omitted if travel from this room to that room is not possible.
        roomSW:
          type: string
          description: The `roomId` of the room reachable from this node by leaving in the southwest direction. (This is the room that is one shallower in the same ray.) Omitted if travel from this room to that room is not possible.
        energyCost:
          type: integer
          format: int32
          description: The energy cost for the node.
        introStoryId:
          $ref: '#/components/schemas/StoryId'
        introStory:
          $ref: '#/components/schemas/Story'
        requirements:
          oneOf:
            - $ref: '#/components/schemas/Requirements'
            - type: array
              items:
                $ref: '#/components/schemas/Requirements'
          description: |-
            If present, represents additional node-specific requirements to engage the node.

            If the request is for a specific difficulty or if the node-specific requirements do not vary by difficulty, a single Requirements object is returned.

            Otherwise, an array of Requirement objects is returned, with index `0` being for normal difficulty and indexes `1`-`N` being for difficulties `1`-`N`, respectively. `null` elements in the array signify no node-specific requirements at that difficulty.
        combatId:
          type: string
          description: The `combatId` of the combat occurring at this node. Can be passed to the `/nodeCombats` route to get the full NodeCombat object for the normal difficulty.
        combat:
          $ref: '#/components/schemas/NodeCombat'
        firstTimeRewards:
          $ref: '#/components/schemas/ItemQuantity'
        limitedRewards:
          $ref: '#/components/schemas/ItemQuantity'
        limitedRewardsLimit:
          type: integer
          format: int32
          description: Specifies the limit of how many limited rewards may be obtained from the node. (Typically used for event campaigns.)
        rewards:
          $ref: '#/components/schemas/ItemQuantity'
        raidNodeRewards:
          type: string
          description: 'For raids, instead of the above rewards, a string index identifying the reward type (*e.g.* `standard` or `boss`). This index is for the RaidInfo object''s `nodeRewards` property.'
    ChapterInfo:
      title: ChapterInfo
      type: object
      description: Information about a chapter.
      properties:
        requirements:
          $ref: '#/components/schemas/Requirements'
        numTiers:
          type: integer
          format: int32
          description: The number of tiers in this chapter.
        tiers:
          $ref: '#/components/schemas/IndexedNodeInfos'
    EpisodicInfo:
      title: EpisodicInfo
      type: object
      description: Information about an Episodic.
      properties:
        id:
          type: string
          description: The `episodicId` of the episodic.
        name:
          type: string
          description: (localized)
        subName:
          $ref: '#/components/schemas/SubName'
        details:
          $ref: '#/components/schemas/Details'
        nodeName:
          type: string
          description: 'The localized prefix name for each node in the episodic. For example, "HEROES" in "HEROES 1-1".'
        requirements:
          $ref: '#/components/schemas/Requirements'
        numChapters:
          type: integer
          format: int32
          description: The number of chapters in this episodic.
        chapters:
          $ref: '#/components/schemas/IndexedChapterInfos'
        group:
          $ref: '#/components/schemas/EventCampaignGroup'
    RaidGroupInfo:
      title: RaidGroupInfo
      type: object
      description: Information about a raid group.
      properties:
        id:
          type: string
          description: The `groupId` for the raid group.
        name:
          type: string
          description: (localized)
        subName:
          $ref: '#/components/schemas/SubName'
        details:
          $ref: '#/components/schemas/Details'
    RaidInfo:
      title: RaidInfo
      type: object
      description: |-
        Information about a raid or dark dimension.

        Raid completion rewards are returned in the `completion` property, with consolation rewards in tier 0.

        Dark dimension completion rewards are returned in the `ddCompletion` property, with first time rewards in the 100% tier and second time rewards (first *timed* completion) in the 200% tier.
      properties:
        groupId:
          type: string
          description: The ID of the raid group to which this raid belongs.
        id:
          type: string
          description: The ID of this raid or dark dimension.
        name:
          type: string
          description: (localized)
        subName:
          $ref: '#/components/schemas/SubName'
        details:
          $ref: '#/components/schemas/Details'
        keyCost:
          type: integer
          format: int32
          description: The number of keys required to start the raid.
        hours:
          type: integer
          description: The number of hours allowed to complete the raid.
          format: int32
        teams:
          type: integer
          format: int32
          description: The number of strike teams in the raid.
        maxPlayersPerTeam:
          type: integer
          format: int32
          description: The maximum number of players that can join each strike team. (Thus `teams * maxPlayersPerTeam` gives the total number of players that can participate in the raid.)
        combatNodesPerTeam:
          type: integer
          format: int32
          description: The number of combat nodes per strike team. (Thus `teams * combatNodesPerTeam` gives the total number of combat nodes in the whole raid.)
        rayCount:
          type: integer
          format: int32
          description: |-
            The number of rays in the raid or dark dimension map.

            Rays run from the southwest to the northeast.

            Typically, rooms in the same ray start with the same letter and increase in number, *e.g.* `A1`, `A2`, *etc.*.

            So, typically, the number of rays is equal to the number of letters used for `roomId`s.
        rayDepth:
          type: integer
          format: int32
          description: |-
            The depth of each ray in the raid or dark dimension map.

            Rays run from the southwest to the northeast.

            Typically, rooms in the same ray start with the same letter and increase in number, *e.g.* `A1`, `A2`, *etc.*.

            So, typically, the depth of each ray is equal to the number of numbers used for `roomId`s.
        rays:
          type: array
          description: |-
            An array of rays, each ray being an array of `roomId` strings, *e.g.* `"A1"`. (`""` indicates no room at that position in the ray.)

            Each ray run from the southwest to the northeast.

            The first ray is the northwest-most ray and the last row is the southeast-most ray.
          items:
            type: array
            items:
              type: string
        startingRoomId:
          type: string
          description: The `roomId` at which all players start.
        maxDifficulty:
          type: integer
          format: int32
          description: 'The number of difficulties beyond normal currently available. If omitted, no additional difficulties are available.'
        difficulties:
          $ref: '#/components/schemas/IndexedRaidDifficultyInfos'
        rooms:
          $ref: '#/components/schemas/MappedNodeInfos'
        nodeRewards:
          $ref: '#/components/schemas/MappedRewards'
        completion:
          $ref: '#/components/schemas/Objective'
        ddCompletion:
          $ref: '#/components/schemas/Objective'
    ObjectiveRange:
      title: ObjectiveRange
      type: object
      description: Describes a range of scores applicable to an objective.
      properties:
        type:
          type: string
          enum:
            - rank
            - top
          description: |-
            Indicates the type of range:
            - `rank` indicates an absolute rank range like "Rank 21-50".
            - `top` indicates a percentage range like "Top 1-2%".
        start:
          type: integer
          format: int32
          description: The start of the range. (The first number in the examples above.)
        stop:
          type: integer
          format: int32
          description: The end of the range. (The second number in the examples above.)
        rewards:
          $ref: '#/components/schemas/ItemQuantity'
    ObjectiveTier:
      title: ObjectiveTier
      type: object
      description: Describes a scoring tier applicable to an objective.
      properties:
        goal:
          type: integer
          format: int32
          description: The points or percentage progress needed to reach the tier.
        rewards:
          $ref: '#/components/schemas/ItemQuantity'
        premiumRewards:
          $ref: '#/components/schemas/ItemQuantity'
        raidRewards:
          type: array
          description: |-
            For raid rewards at a given scoring tier, indicates the rewards available to members based on their damage rank range.

            Range rewards are not additive and are granted solely based on whichever range applies for the final score.
          items:
            $ref: '#/components/schemas/ObjectiveRange'
    RaidDifficultyInfo:
      title: RaidDifficultyInfo
      type: object
      description: |-
        Information about a raid difficulty.

        The fields of `enemyAdjustment` are added to the corresponding fields of all enemy CharacterInstance objects in the raid, capped at the values in `enemyCap`. An omitted field means no adjustment or no cap, respectively.

        The `bonusNodeRewards` are added to every node in the raid.

        The `bonusCompletionRewardsPerTier` are added to completion rewards, `0` times for the consolation tier, `1` time for the first tier, `2` times for the second tier, and `3` times for the third tier.

        The `bonusCompletionRewards` are added to completion rewards upon reaching the specified goals.

        The `bonusAllianceRewards` are rewarded to the alliance upon reaching the specified goals.
      properties:
        difficultyUnlock:
          type: integer
          format: int32
          description: The percent completion of the previous difficulty needed to unlock this difficulty.
        enemyAdjustment:
          $ref: '#/components/schemas/CharacterInstance'
        enemyCap:
          $ref: '#/components/schemas/CharacterInstance'
        healLimit:
          type: integer
          format: int32
          example: 0
          description: 'The limit on the amount of heals allowed for this difficulty. `0` means no heals allowed. If the field is omitted, there is no limit on the amount of heals allowed.'
        requirements:
          $ref: '#/components/schemas/Requirements'
        recommendations:
          type: string
          description: (localized)
        bonusNodeRewards:
          $ref: '#/components/schemas/ItemQuantity'
        bonusCompletionRewardsPerTier:
          $ref: '#/components/schemas/ItemQuantity'
        bonusCompletionRewards:
          $ref: '#/components/schemas/Objective'
        bonusAllianceRewards:
          $ref: '#/components/schemas/Objective'
        firstTimeRewardsUnlock:
          type: integer
          format: int32
          description: The percent completion of this difficulty needed to unlock the first time rewards.
        firstTimeRewards:
          $ref: '#/components/schemas/ItemQuantity'
    Scope:
      title: Scope
      description: 'If scopeFormat=id, just the ID string. Otherwise, the full Scope object.'
      oneOf:
        - type: string
          description: The scope ID.
          example: ScopeId-or-ScopeObject
        - type: object
          properties:
            id:
              type: string
              description: The scope ID.
            name:
              type: string
              description: (localized)
            description:
              type: string
              description: (localized)
    DateTime:
      type: integer
      title: DateTime
      description: A date and time expressed as seconds since 1970 UTC.
      format: int64
    SimpleProgress:
      title: SimpleProgress
      type: object
      description: Represents simple progress towards a particular objective.
      properties:
        completedTier:
          type: integer
          format: int32
          description: The most recently completed tier.
        goalTier:
          type: integer
          format: int32
          description: The tier being worked on (*i.e.* the next tier).
        points:
          type: integer
          format: int32
          description: Points accumulated towards the next tier.
        goal:
          type: integer
          format: int32
          description: Points needed for the next tier.
    Progress:
      title: Progress
      type: object
      description: Represents progress towards a particular objective that may be ranked or have claimable tiers.
      properties:
        completionRun:
          type: integer
          format: int32
          description: 'Starts at 1 for the player''s first completion of the tiers. For repeatable tiers, goes up by 1 after each successful completion until reaching the Objective''s `maxCompletions`.'
          default: 1
        completionOffset:
          type: integer
          format: int32
          description: 'For repeatable tiers, specifies the tier offset for the current completion run. This value should be added to all tier numbers for player-facing display.'
          default: 0
        completedTier:
          type: integer
          format: int32
          description: The most recently completed tier.
        goalTier:
          type: integer
          format: int32
          description: The tier being worked on (*i.e.* the next tier).
        claimableTiers:
          type: array
          description: Tiers that have are currently claimable (and have not yet been claimed).
          items:
            type: integer
            format: int32
        claimableTiersPremium:
          type: array
          description: Tiers that have are currently claimable (and have not yet been claimed) with preimum rewards.
          items:
            type: integer
            format: int32
        points:
          type: integer
          format: int32
          description: Points accumulated towards the next tier.
        goal:
          type: integer
          format: int32
          description: Points needed for the next tier.
        rank:
          type: integer
          format: int32
          description: This entity's rank among others working on the same objective.
    Objective:
      title: Objective
      type: object
      description: |-
        Describes an objective including its scoring tiers or ranges.

        The `progress` field is only present when requesting a player's progress toward the objective. For raids, the `progress` field represents the alliance's progress on the raid and the `contribution` field represents the player's damage contribution.
      properties:
        progress:
          $ref: '#/components/schemas/Progress'
        contribution:
          $ref: '#/components/schemas/Progress'
        tiers:
          $ref: '#/components/schemas/IndexedObjectiveTiers'
        maxCompletions:
          type: integer
          format: int32
          description: |-
            The maximum number of times the tiers can be completed. If omitted, defaults to 1.

            To test for repeatable tiers use `maxCompletions > 1`.

            To test for non-repeatable tiers use `!(maxCompletions > 1)`.
          default: 1
          minimum: 1
        ranges:
          type: array
          description: |-
            The scoring ranges for the objective.

            Range rewards are not additive and are granted solely based on whichever range applies for the final score.
          items:
            $ref: '#/components/schemas/ObjectiveRange'
        minRangeScore:
          type: integer
          format: int32
          description: The minimum score to qualify for range rewards.
          default: 1
    Bracket:
      title: Bracket
      type: object
      description: Information about a scoring bracket for a subset of players.
      properties:
        id:
          type: string
          description: An identifier for the bracket.
        objective:
          $ref: '#/components/schemas/Objective'
    EventInfo:
      title: EventInfo
      type: object
      description: 'Information about a scheduled, running, or past event.'
      properties:
        id:
          type: string
          description: An identifier for the instance of the event.
        startTime:
          $ref: '#/components/schemas/DateTime'
        endTime:
          $ref: '#/components/schemas/DateTime'
        type:
          type: string
          description: The type of event.
          enum:
            - info
            - bonus
            - blitz
            - episodic
            - milestone
            - raid
            - raidSeason
            - warSeason
            - donation
            - battlePass
            - strikePass
            - tower
            - pickYourPoison
        apiClaimable:
          type: boolean
          description: 'If `true`, the event is claimable via the API.'
        locationHints:
          type: array
          description: An array of identifiers suggesting locations for the event to appear.
          items:
            type: string
        name:
          type: string
          description: (localized) The name of the event.
        subName:
          $ref: '#/components/schemas/SubName'
        details:
          $ref: '#/components/schemas/Details'
        popupDetails:
          $ref: '#/components/schemas/PopupDetails'
        cardArt:
          $ref: '#/components/schemas/URL'
        popupArt:
          $ref: '#/components/schemas/URL'
        blitz:
          $ref: '#/components/schemas/BlitzEventInfo'
        episodic:
          $ref: '#/components/schemas/EpisodicEventInfo'
        milestone:
          $ref: '#/components/schemas/MilestoneEventInfo'
        tower:
          $ref: '#/components/schemas/TowerEventInfo'
        pickYourPoison:
          $ref: '#/components/schemas/PickYourPoisonEventInfo'
        battlePass:
          $ref: '#/components/schemas/BattlePassEventInfo'
        strikePass:
          $ref: '#/components/schemas/StrikePassEventInfo'
    BlitzEventInfo:
      title: BlitzEventInfo
      type: object
      description: Blitz information for an event. (For `blitz` type only.)
      properties:
        requirements:
          $ref: '#/components/schemas/Requirements'
        brackets:
          type: array
          items:
            $ref: '#/components/schemas/Bracket'
    TowerEventInfo:
      title: TowerEventInfo
      type: object
      description: Tower information for an event. (For `tower` type only.)
      properties:
        requirements:
          $ref: '#/components/schemas/Requirements'
        brackets:
          type: array
          items:
            $ref: '#/components/schemas/Bracket'
    EpisodicEventInfo:
      title: EpisodicEventInfo
      type: object
      description: Episodic information for an event. (For `episodic` type only.)
      properties:
        type:
          type: string
          description: The functional type of the episodic event.
          enum:
            - eventCampaign
            - flashEvent
            - unlockEvent
        typeName:
          type: string
          description: (localized)
        energy:
          $ref: '#/components/schemas/Item'
        ids:
          type: array
          description: 'The episodicIds for use with `/game/v1/episodics/eventCampaign/{id}`.'
          items:
            type: string
        id:
          type: string
          description: 'The episodicId for use with `/game/v1/episodics/flashEvent/{id}` or `/game/v1/episodics/unlockEvent/{id}`.'
    PickYourPoisonEventInfo:
      title: PickYourPoisonEventInfo
      type: object
      description: Pick Your Poison information for an event. (For `pickYourPoison` type only.)
      properties:
        typeName:
          type: string
          description: (localized)
        brackets:
          type: array
          items:
            $ref: '#/components/schemas/Bracket'
    MilestoneEventInfo:
      title: MilestoneEventInfo
      type: object
      description: Milestone information for an event. (For `milestone` type only.)
      properties:
        type:
          type: string
          enum:
            - solo
            - alliance
          description: The functional type of the milestone event.
        typeName:
          type: string
          description: (localized)
        scoring:
          type: object
          description: Describes how the milestone is scored.
          properties:
            description:
              type: string
              description: (localized) The overall scoring description.
            methods:
              type: array
              description: An array of uncapped methods for scoring points for this milestone.
              items:
                $ref: '#/components/schemas/ScoringMethod'
            cappedScorings:
              type: array
              items:
                type: object
                properties:
                  cap:
                    type: integer
                    format: int32
                    description: The maximum combined points that can be earned by these scoring methods.
                  soFar:
                    type: integer
                    format: int32
                    description: How many combined points the player has earned from these scoring methods so far.
                  methods:
                    type: array
                    description: An array of capped methods for scoring points for this milestone.
                    items:
                      $ref: '#/components/schemas/ScoringMethod'
        brackets:
          type: array
          items:
            $ref: '#/components/schemas/Bracket'
    BattlePassEventInfo:
      title: BattlePassEventInfo
      type: object
      description: Battle Pass information for an event. (For `battlePass` type only.)
      properties:
        brackets:
          type: array
          items:
            $ref: '#/components/schemas/Bracket'
    StrikePassEventInfo:
      title: StrikePassEventInfo
      type: object
      description: Strike Pass information for an event. (For `strikePass` type only.)
      properties:
        brackets:
          type: array
          items:
            $ref: '#/components/schemas/Bracket'
    ScoringMethod:
      title: ScoringMethod
      type: object
      properties:
        description:
          type: string
          description: (localized) The description of this method for scoring points.
        points:
          type: integer
          format: int32
          description: The number of points awarded by this method of scoring.
    PlayerCard:
      title: PlayerCard
      type: object
      description: Information about a player.
      properties:
        name:
          type: string
          description: The player's commander name.
        icon:
          $ref: '#/components/schemas/URL'
        frame:
          $ref: '#/components/schemas/URL'
        level:
          $ref: '#/components/schemas/SimpleProgress'
        tcp:
          type: integer
          format: int32
          description: The player's total collection power.
        stp:
          type: integer
          format: int32
          description: The player's strongest team power.
        warMvp:
          type: integer
          format: int32
          description: The number of times the player was war MVP.
        charactersCollected:
          type: integer
          format: int32
          description: The number of characters the player has collected.
        charactersAtMaxStarRank:
          type: integer
          format: int32
          description: The number of characters the player has at max star rank.
        bestArena:
          type: integer
          format: int32
          description: The player's all-time arena rank.
        latestArena:
          type: integer
          format: int32
          description: The player's latest arena rank.
        latestBlitz:
          type: integer
          format: int32
          description: The player's latest blitz rank.
        blitzWins:
          type: integer
          format: int32
          description: The player's total number of blitz wins.
        rosterShare:
          oneOf:
            - $ref: '#/components/schemas/RosterShare'
            - $ref: '#/components/schemas/RosterShareState'
          description: |-
            For the player's own card: the full RosterShareState.
            Otherwise, the simplified RosterShare boolean.
    AllianceMemberCard:
      title: AllianceMemberCard
      type: object
      description: Information about an alliance member.
      properties:
        name:
          type: string
          description: The player's commander name.
        icon:
          $ref: '#/components/schemas/URL'
        frame:
          $ref: '#/components/schemas/URL'
        level:
          $ref: '#/components/schemas/SimpleProgress'
        tcp:
          type: integer
          format: int32
          description: The player's total collection power.
        stp:
          type: integer
          format: int32
          description: The player's strongest team power.
        warMvp:
          type: integer
          format: int32
          description: The number of times the player was war MVP.
        charactersCollected:
          type: integer
          format: int32
          description: The number of characters the player has collected.
        rosterShare:
          $ref: '#/components/schemas/RosterShare'
    IsSelf:
      type: boolean
      description: |-
        If `true`, indicates this record belongs to the current user.

        If `false` or omitted, indicates that this record does not belong to the current user.
    RosterShare:
      type: boolean
      description: |-
        If `true`, indicates this roster is being shared.

        If `false` or omitted, indicates that roster is not being shared.
    MemberId:
      title: MemberId
      type: string
      description: 'Temporary ID for the member in the alliance. When a member joins or leaves an alliance, all alliance member''s handles are changed.'
    AllianceId:
      title: AllianceId
      type: string
      description: |-
        Alliance Identifier: `{aid}:{member_version}`. How an alliance is identified.

        `member_version` is a random value generated whenever anyone joins/leaves the alliance.
    AllianceRank:
      type: string
      title: AllianceRank
      description: A rank in an alliance.
      enum:
        - leader
        - captain
        - member
    WarZone:
      type: integer
      title: WarZone
      description: |-
        A war zone.

        Zone `1`: 1 AM GMT Tuesday, Thursday, Saturday

        Zone `2`: 7 AM GMT Tuesday, Thursday, Saturday

        Zone `3`: 1 PM GMT Tuesday, Thursday, Saturday

        Zone `4`: 7 PM GMT Tuesday, Thursday, Saturday
      format: int32
      minimum: 1
      maximum: 4
    WarLeague:
      type: object
      title: WarLeague
      description: A war league.
      properties:
        id:
          type: integer
          format: int32
          description: The `id` of the league (`0` being "Bronze 1" and going up from there).
        name:
          type: string
          description: (localized)
    AllianceCard:
      title: AllianceCard
      type: object
      description: Information about an alliance.
      properties:
        id:
          $ref: '#/components/schemas/AllianceId'
        name:
          type: string
          description: The alliance's name.
        icon:
          $ref: '#/components/schemas/URL'
        level:
          $ref: '#/components/schemas/SimpleProgress'
        description:
          type: string
          description: The alliance's description.
        type:
          type: string
          enum:
            - public
            - private
          description: The type of the alliance (public or private).
        managementRank:
          $ref: '#/components/schemas/AllianceRank'
        demoteDays:
          type: integer
          format: int32
          description: Number of days of inactivity before automatic demotion.
        kickDays:
          type: integer
          format: int32
          description: Number of days of inactivity before automatic kick.
        warZone:
          $ref: '#/components/schemas/WarZone'
        warLeague:
          $ref: '#/components/schemas/WarLeague'
        warTrophies:
          type: integer
          format: int32
          description: The number of war trophies the alliance has.
        warRank:
          type: integer
          description: The most recent season raid rank the alliance achieved.
    AllianceMemberInfo:
      title: AllianceMemberInfo
      description: Info about a member of an alliance.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/MemberId'
        rank:
          $ref: '#/components/schemas/AllianceRank'
        card:
          $ref: '#/components/schemas/AllianceMemberCard'
        isSelf:
          $ref: '#/components/schemas/IsSelf'
    EventCampaignGroup:
      title: EventCampaignGroup
      type: object
      description: 'For Event Campaigns, information about the Event Campaign Group that they are a part of.'
      properties:
        name:
          type: string
          description: (localized)
        description:
          type: string
          description: (localized)
        flavorText:
          type: string
          description: (localized)
        ids:
          type: array
          description: Ordered list of EpisodicIds in this Event Campaign Group.
          items:
            type: string
    ItemCharacterInfo:
      title: ItemCharacterInfo
      type: object
      description: For character that use an Item
      properties:
        character:
          $ref: '#/components/schemas/CharacterInfo'
        equips:
          $ref: '#/components/schemas/IndexedEquipsInfos'
    EquipInfo:
      type: array
      title: EquipInfo
      minItems: 6
      maxItems: 6
      items:
        type: boolean
      description: True if the item is needed for the slot.
    IndexedEquipsInfos:
      title: IndexedEquipsInfos
      type: object
      description: Object mapping tier numbers (starting at 1) to EquipInfo objects.
      properties:
        '#':
          $ref: '#/components/schemas/EquipInfo'
      additionalProperties:
        $ref: '#/components/schemas/EquipInfo'
    Squad:
      title: Squad
      type: array
      description: Array of characterIds.
      items:
        type: string
        example: AimControl_Infect
    SquadTabs:
      title: SquadTabs
      type: object
      description: Object containing a player's squads.
      properties:
        roster:
          type: array
          description: List of roster squads.
          items:
            $ref: '#/components/schemas/Squad'
        blitz:
          type: array
          description: List of blitz squads.
          items:
            $ref: '#/components/schemas/Squad'
        tower:
          type: array
          description: List of tower squads.
          items:
            $ref: '#/components/schemas/Squad'
        raids:
          type: array
          description: List of raids squads.
          items:
            $ref: '#/components/schemas/Squad'
        arena:
          type: array
          description: List of arena squads.
          items:
            $ref: '#/components/schemas/Squad'
        war:
          type: array
          description: List of war squads.
          items:
            $ref: '#/components/schemas/Squad'
        crucible:
          type: array
          description: List of crucible squads.
          items:
            $ref: '#/components/schemas/Squad'
    SquadsInfo:
      title: SquadsInfo
      type: object
      description: Object containing information about a player's squads
      properties:
        tabs:
          $ref: '#/components/schemas/SquadTabs'
        maxSquads:
          type: integer
          format: int32
          description: The player's maximum number of squads.
    RecruitInfo:
      title: RecruitInfo
      type: object
      description: Object containting information about a recruit
      properties:
        recruitId:
          $ref: '#/components/schemas/RecruitId'
        ad:
          $ref: '#/components/schemas/RecruitAd'
        card:
          $ref: '#/components/schemas/PlayerCard'
        expiration:
          $ref: '#/components/schemas/DateTime'
    RecruitId:
      title: RecruitId
      type: string
      description: The recruit's temporary identifier
    RecruitAd:
      title: RecruitAd
      type: object
      description: Object containing information about a recruit's ad. (Format will be changed in an upcoming release without notice.)
      properties:
        tcp:
          type: integer
          format: int32
          description: The player's total collection power.
        stp:
          type: integer
          format: int32
          description: The player's strongest team power.
        level:
          type: integer
          format: int32
          description: The players' level.
        lang:
          $ref: '#/components/schemas/LanguageCode'
        timezone:
          type: string
          description: The players' preferred time zone.
    Story:
      title: Story
      type: object
      description: Object containing information about dialogues in a story
      properties:
        left:
          $ref: '#/components/schemas/Squad'
        right:
          $ref: '#/components/schemas/Squad'
        active:
          type: string
          description: The active side in the dialogue.
          enum:
            - left
            - right
        text:
          type: string
          description: (localized) The dialogue text.
  parameters:
    memberId:
      schema:
        type: string
      name: memberId
      in: path
      required: true
      description: 'Temporary ID for the member in the alliance. When a member joins or leaves an alliance, all alliance member''s handles are changed.'
    recruitId:
      schema:
        type: string
      in: path
      name: recruitId
      required: true
      description: The temporary ID given to a recruit when they enroll.
    applicantId:
      schema:
        type: string
      in: path
      name: applicantId
      required: true
      description: The temporary ID given to an applicant when they enroll.
    requesterId:
      schema:
        type: string
      name: requesterId
      in: path
      required: true
      description: 'Temporary ID for player requesting to join an alliance.'
    lang:
      schema:
        type: string
        default: en
      in: query
      name: lang
      description: 'A language code specifying the language to return results in. If you don''t need localized strings at all, set to "none".'
    statsFormat:
      schema:
        type: string
        enum:
          - object
          - csv
        default: object
      in: query
      name: statsFormat
      description: 'If "csv", returns all Stats, StatBoost, and Iso8 objects as CSV strings instead of JSON objects. Any omitted values default to 0 or "none".'
    itemFormat:
      schema:
        type: string
        enum:
          - object
          - id
        default: object
      in: query
      name: itemFormat
      description: 'If "id", returns all Item objects as ID strings instead of JSON objects.'
    itemFormat_id:
      schema:
        type: string
        enum:
          - object
          - id
        default: id
      in: query
      name: itemFormat
      description: 'If "id", returns all Item objects as ID strings instead of JSON objects.'
    traitFormat:
      schema:
        type: string
        enum:
          - object
          - id
        default: object
      in: query
      name: traitFormat
      description: 'If "id", returns all Trait objects as ID strings instead of JSON objects.'
    quantityFormat:
      schema:
        type: string
        enum:
          - int
          - local
        default: int
      in: query
      name: quantityFormat
      description: 'If "local", returns all non-negative quantity and maxQuantity fields as localized strings instead of integers.'
    scopeFormat:
      schema:
        type: string
        enum:
          - object
          - id
        default: object
      in: query
      name: scopeFormat
      description: 'If "id", returns all Scope objects as ID strings instead of JSON objects.'
    charLevel:
      schema:
        type: integer
        format: int32
        minimum: 1
      in: query
      name: level
      description: 'The character''s level. If unspecified, defaults to the current level cap.'
    charYellow:
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 7
        default: 7
      in: query
      name: yellow
      description: The number of yellow stars.
    charRed:
      schema:
        type: integer
        format: int32
        minimum: 0
        maximum: 10
        default: 0
      in: query
      name: red
      description: The number of red stars. Values 8-10 represent 1-3 diamonds, respectively.
    charGearTier:
      schema:
        type: integer
        format: int32
        minimum: 1
      in: query
      name: gearTier
      description: 'The gear tier. If unspecified, defaults to the maximum tier for the requested character level.'
    charSlot0:
      schema:
        type: boolean
        default: false
      in: query
      name: slot0
      description: True if top left gear piece is equipped.
    charSlot1:
      schema:
        type: boolean
        default: false
      in: query
      name: slot1
      description: True if middle left gear piece is equipped.
    charSlot2:
      schema:
        type: boolean
        default: false
      in: query
      name: slot2
      description: True if bottom left gear piece is equipped.
    charSlot3:
      schema:
        type: boolean
        default: false
      in: query
      name: slot3
      description: True if top right gear piece is equipped.
    charSlot4:
      schema:
        type: boolean
        default: false
      in: query
      name: slot4
      description: True if middle right gear piece is equipped.
    charSlot5:
      schema:
        type: boolean
        default: false
      in: query
      name: slot5
      description: True if bottom right gear piece is equipped.
    charBasic:
      schema:
        type: integer
        minimum: 1
        maximum: 8
        format: int32
      in: query
      name: basic
      description: 'The basic ability level. If unspecified, defaults to the max for the requested character level and gear tier.'
    charSpecial:
      schema:
        type: integer
        format: int32
        minimum: 0
        maximum: 8
      in: query
      name: special
      description: 'The special ability level. If unspecified, defaults to the max for the requested character level and gear tier.'
    charUltimate:
      schema:
        type: integer
        format: int32
        minimum: 0
        maximum: 8
      in: query
      name: ultimate
      description: 'The ultimate ability level. If unspecified, defaults to the max for the requested character level and gear tier.'
    charPassive:
      schema:
        type: integer
        minimum: 0
        maximum: 6
        format: int32
      in: query
      name: passive
      description: 'The passive ability level. If unspecified, defaults to the max for the requested character level and gear tier.'
    charIso8:
      schema:
        type: string
      in: query
      name: iso8
      description: 'Iso8 Object in CSV format, any trailing values taking their default. Alternatively, can be "{class-id},max" to represent that class at max iso8 or "{class-id},#" to represent that class at that number of iso8 across the board. In the shorthand notation, gems are folded to their equivalent matrix. For example, `fortifier,7` is equivalent to `blue,2,2,2,2,2,fortifier,7,7,7,7,7`. (Default: no Iso8.)'
    charStark:
      schema:
        type: string
      in: query
      name: stark
      description: 'StatBoost Object in CSV format (5 primary stats only), any trailing values taking their default. Alternatively, can be "max" to represent max value. (Default: no stark tech.)'
    charWar:
      schema:
        type: string
        enum:
          - attack
          - defend;ABCHM
      in: query
      name: war
      description: 'War context used for calculating boosts. (Default: no war boosts.) "attack" or "defend", optionally followed by a semicolon and then the room codes for which relevant rooms remain in the character''s own helicarrier. (A = Armory, B = Barracks, C = Cargo Bay, H = Hangar, M = Med Bay) Advanced war contexts (see response specification) may also be used, but will result in slower processing times.'
    charInfo_instance:
      schema:
        type: string
        enum:
          - none
          - part
          - full
        default: none
      in: query
      name: charInfo
      description: 'Specifies how much metadata to include about each character. If "part", only returns abilityKits/gearTiers fields. Note: if level, yellow, red, or gearTier is set to "all", resulting in an array of CharacterInstance objects being returned, no CharacterInfo object is available and this parameter is ignored.'
    charInfo_roster:
      schema:
        type: string
        enum:
          - none
          - full
        default: none
      in: query
      name: charInfo
      description: 'Specifies how much metadata to include about each character. If "full", returns character name, portrait and traits'
    charAbilityKits:
      schema:
        type: string
        enum:
          - none
          - part
          - full
        default: part
      in: query
      name: abilityKits
      description: Specifies how much ability kit information to include about each character. ("part" = only their current ability levels)
    charGearTiers:
      schema:
        type: string
        enum:
          - none
          - part
          - full
        default: part
      in: query
      name: gearTiers
      description: Specifies how much gear tier information to include about each character. ("part" = only their current gear tier)
    pathCharLevel:
      schema:
        type: integer
        minimum: 1
        format: int32
      name: level
      in: path
      required: true
      description: The character's level.
    pathCharYellow:
      schema:
        type: integer
        minimum: 1
        maximum: 7
        format: int32
      name: yellow
      in: path
      required: true
      description: The number of yellow stars.
    pathCharRed:
      schema:
        type: integer
        minimum: 0
        maximum: 10
        format: int32
      name: red
      in: path
      required: true
      description: The number of red stars. Values 8-10 represent 1-3 diamonds, respectively.
    pathCharGearTier:
      schema:
        type: integer
        minimum: 1
        format: int32
      name: gearTier
      in: path
      required: true
      description: The gear tier.
    pathCharSlot0:
      schema:
        type: boolean
      name: slot0
      in: path
      required: true
      description: True if top left gear piece is equipped.
    pathCharSlot1:
      schema:
        type: boolean
      name: slot1
      in: path
      required: true
      description: True if middle left gear piece is equipped.
    pathCharSlot2:
      schema:
        type: boolean
      name: slot2
      in: path
      required: true
      description: True if bottom left gear piece is equipped.
    pathCharSlot3:
      schema:
        type: boolean
      name: slot3
      in: path
      required: true
      description: True if top right gear piece is equipped.
    pathCharSlot4:
      schema:
        type: boolean
      name: slot4
      in: path
      required: true
      description: True if middle right gear piece is equipped.
    pathCharSlot5:
      schema:
        type: boolean
      name: slot5
      in: path
      required: true
      description: True if bottom right gear piece is equipped.
    pathCharBasic:
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 8
      name: basic
      in: path
      required: true
      description: The basic ability level.
    pathCharSpecial:
      schema:
        type: integer
        format: int32
        minimum: 0
        maximum: 8
      name: special
      in: path
      required: true
      description: The special ability level.
    pathCharUltimate:
      schema:
        type: integer
        format: int32
        minimum: 0
        maximum: 8
      name: ultimate
      in: path
      required: true
      description: The ultimate ability level.
    pathCharPassive:
      schema:
        type: integer
        format: int32
        minimum: 0
        maximum: 6
      name: passive
      in: path
      required: true
      description: The passive ability level.
    charMission:
      schema:
        type: string
        enum:
          - 'false'
          - 'true'
          - both
        default: 'false'
      in: query
      name: mission
      description: 'If "true", gets information for the mission variants of the characters. If "false" (the default), gets information for the player variants of the characters. If "both" gets information for both.'
    charTrait:
      schema:
        type: string
      in: query
      name: trait
      description: 'Limits results to the specified trait id. (If omitted, results are not limited by traits.)'
    charStatus:
      schema:
        type: string
        enum:
          - playable
          - summon
          - war
          - operator
          - nue
          - model
          - unplayable
          - other
          - unknown
      in: query
      name: status
      description: 'Limits results to the specified status. (If omitted, results are not limited by status.)'
    charInfo_char:
      schema:
        type: string
        enum:
          - none
          - full
        default: full
      in: query
      name: charInfo
      description: Specifies how much metadata to include about each character.
    charPathCharacterId:
      schema:
        type: string
      name: characterId
      in: path
      required: true
      description: The id of the character for which information is requested.
    squadPathTabId:
      schema:
        type: string
        enum:
          - roster
          - blitz
          - tower
          - raids
          - arena
          - war
          - crucible
      name: tabId
      in: path
      required: true
      description: The id of the tab for which information is requested.
    charMission_noBoth:
      schema:
        type: string
        enum:
          - 'false'
          - 'true'
        default: 'false'
      in: query
      name: mission
      description: 'If "true", gets information for the mission variant of the character. If "false" (the default), gets information for the player variant of the character.'
    pieceInfo_full:
      schema:
        type: string
        enum:
          - none
          - full
        default: full
      in: query
      name: pieceInfo
      description: Specifies how much metadata to include about each top-level item.
    pieceDirectCost_none:
      schema:
        type: string
        default: none
        enum:
          - none
          - part
          - full
      in: query
      name: pieceDirectCost
      description: Specifies whether to include the direct crafting cost of each top-level item ("part") or all items ("full").
    nodeInfo_none:
      schema:
        type: string
        enum:
          - none
          - part
          - full
        default: none
      in: query
      name: nodeInfo
      description: 'Specifies how much node information to include for each node: none (`none`), whatever other parameters call out (`part`), or general information plus whatever other parameters call out (`full`).'
    raidInfo_none:
      schema:
        type: string
        enum:
          - none
          - full
        default: none
      in: query
      name: raidInfo
      description: Specifies how much the general raid information to include for each raid.
    raidMap_none:
      schema:
        type: string
        enum:
          - none
          - full
        default: none
      in: query
      name: raidMap
      description: Specifies how much of map information to include for each raid.
    raidRewards_none:
      schema:
        type: string
        enum:
          - none
          - full
        default: none
      in: query
      name: raidRewards
      description: Specifies how much of the raid reward information to include for each raid.
    pathDdId:
      schema:
        type: string
      name: ddId
      in: path
      required: true
      description: The ID of the dark dimension for which information is requested.
    raidInfo_full:
      schema:
        type: string
        enum:
          - none
          - full
        default: full
      in: query
      name: raidInfo
      description: Specifies how much the general raid information to include for each raid.
    raidMap_full:
      schema:
        type: string
        enum:
          - none
          - full
        default: full
      in: query
      name: raidMap
      description: Specifies how much of map information to include for each raid.
    raidRewards_full:
      schema:
        type: string
        enum:
          - none
          - full
        default: full
      in: query
      name: raidRewards
      description: Specifies how much of the raid reward information to include for each raid.
    pathRoomId:
      schema:
        type: string
      name: roomId
      in: path
      required: true
      description: The ID of the room for which information is requested.
    pathEpisodicType:
      schema:
        type: string
        enum:
          - campaign
          - eventCampaign
          - challenge
          - flashEvent
          - unlockEvent
          - otherEvent
      name: episodicType
      in: path
      required: true
      description: The type of episodic of interest.
    pathEpisodicId:
      schema:
        type: string
      name: episodicId
      in: path
      required: true
      description: The ID of the episodic for which information is requested.
    nodeInfo_part:
      schema:
        type: string
        enum:
          - none
          - part
          - full
        default: part
      in: query
      name: nodeInfo
      description: 'Specifies how much node information to include for each node: none (`none`), whatever other parameters call out (`part`), or general information plus whatever other parameters call out (`full`).'
    nodeReqs_none:
      schema:
        type: string
        enum:
          - none
          - full
        default: none
      in: query
      name: nodeReqs
      description: Specifies how much of the node requirements to include for each node.
    nodeRewards_none:
      schema:
        type: string
        enum:
          - none
          - full
        default: none
      in: query
      name: nodeRewards
      description: Specifies how much of the node rewards to include for each node.
    pathChapterNumber:
      schema:
        type: integer
        format: int32
        minimum: 1
        example: 1
      name: chapterNumber
      in: path
      required: true
      description: The 1-based chapter number for which information is requested.
    nodeCombat_none:
      schema:
        type: string
        enum:
          - none
          - full
        default: none
      in: query
      name: nodeCombat
      description: Specifies whether to include full combat info (`full`) or just the ID (`none`).
    nodeInfo_full:
      schema:
        type: string
        enum:
          - part
          - full
        default: full
      in: query
      name: nodeInfo
      description: 'Specifies how much node information to include for each node: whatever other parameters call out (`part`) or general information plus whatever other parameters call out (`full`).'
    nodeReqs_full:
      schema:
        type: string
        enum:
          - none
          - full
        default: full
      in: query
      name: nodeReqs
      description: Specifies how much of the node requirements to include for each node.
    nodeRewards_full:
      schema:
        type: string
        enum:
          - none
          - full
        default: full
      in: query
      name: nodeRewards
      description: Specifies how much of the node rewards to include for each node.
    eventType:
      schema:
        type: string
        enum:
          - info
          - bonus
          - blitz
          - episodic
          - milestone
          - raid
          - raidSeason
          - warSeason
          - donation
          - battlePass
          - strikePass
          - tower
          - pickYourPoison
      in: query
      name: type
      description: 'Limits results to the specified event type. (If omitted, results are not limited by event type.)'
    eventEventInfo:
      schema:
        type: string
        enum:
          - none
          - full
        default: full
      in: query
      name: eventInfo
      description: Specifies how much metadata to include about each event.
    charInfo_combat:
      schema:
        type: string
        enum:
          - none
          - full
        default: none
      in: query
      name: charInfo
      description: 'Specifies how much metadata to include about each character. If `full`, returns name and portrait. If `none`, returns no CharacterInfo.'
    charInfo_item:
      schema:
        type: string
        enum:
          - none
          - full
        default: none
      in: query
      name: charInfo
      description: 'Specifies how much metadata to include about each character. If `full`, returns id, mission, name and portrait. If `none`, returns id and mission.'
    pathPypId:
      schema:
        type: string
      name: pypId
      in: path
      required: true
      description: The ID of the pick-your-poison map for which information is requested.
    pathStId:
      schema:
        type: string
      name: stId
      in: path
      required: true
      description: The ID of the survival tower map for which information is requested.
    raidRaidDiffs_none:
      schema:
        type: string
        enum:
          - none
          - full
        default: none
      in: query
      name: raidDiffs
      description: Specifies how much of the difficulty information to include for each raid.
    pathRaidId:
      schema:
        type: string
      name: raidId
      in: path
      required: true
      description: The ID of the raid for which information is requested.
    raidRaidDiffs_full:
      schema:
        type: string
        enum:
          - none
          - full
        default: full
      in: query
      name: raidDiffs
      description: Specifies how much of the difficulty information to include for each raid.
    raidDifficulty:
      schema:
        type: integer
        format: int32
      in: query
      name: difficulty
      description: 'Specifies the difficulty of interest. If omitted, then information for all difficulties is returned. (If `nodeCombat`=`full` and `difficulty` is omitted for a raid with difficulties, then all CharacterInstance objects are replaced with arrays, with [0] being the normal difficulty, [1] being difficulty 1, and so on.)'
    pieceDirectCost_part:
      schema:
        type: string
        default: part
        enum:
          - none
          - part
          - full
      in: query
      name: pieceDirectCost
      description: Specifies whether to include the direct crafting cost of each top-level item ("part") or all items ("full").
    pieceFlatCost_none:
      schema:
        type: string
        default: none
        enum:
          - none
          - full
      in: query
      name: pieceFlatCost
      description: Specifies whether to include the flattened crafting cost of each top-level item.
    subPieceInfo_full:
      schema:
        type: string
        default: full
        enum:
          - none
          - full
      in: query
      name: subPieceInfo
      description: Specifies how much metadata to include about each of the sub-pieces.
    since:
      name: since
      in: query
      schema:
        type: string
      description: 'If specified, must match the `meta.asOf` value of a previous response. If there have been no changes since that response, a 344 UNCHANGED status will be returned to optimize response time and processing.'
    page:
      name: page
      in: query
      required: false
      schema:
        type: integer
        format: int32
        default: 1
        minimum: 1
      description: 'Indicates the page number of the returned results, with `1` being the first page. For results numbered `1` through `perTotal`, page `n` will contain results numbered `(perPage * (n - 1)) + 1` through `perPage * n`. Only used if `perPage` is positive and defaults to the first page.'
    perPage:
      name: perPage
      in: query
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
      description: 'The number of results per page. If unspecified, all results are returned.'
    minTcp:
      name: minTcp
      in: query
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
      description: The minimum total collection power.
    maxTcp:
      name: maxTcp
      in: query
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
      description: The maximum total collection power.
    charAdoption:
      name: charAdoption
      in: query
      required: false
      schema:
        type: string
        default: none
        enum:
          - none
          - full
      description: Specifies whether to include T4 Ability and ISO-8 Class adoption percentages.
  securitySchemes:
    APIKey:
      name: x-api-key
      type: apiKey
      in: header
    AccessTokenSPA:
      type: oauth2
      flows:
        authorizationCode:
          x-client-id: test-docs
          x-default-scopes:
            - m3p.f.pr.pro
            - m3p.f.pr.ros
            - m3p.f.pr.inv
            - m3p.f.pr.act
            - m3p.f.ar.pro
          x-receive-token-in: request-body
          x-pkce-only: true
          authorizationUrl: 'https://hydra-public.prod.m3.scopelypv.com/oauth2/auth'
          tokenUrl: 'https://hydra-public.prod.m3.scopelypv.com/oauth2/token'
          scopes:
            m3p.f.pr.pro: View Profile
            m3p.f.pr.ros: View Roster
            m3p.f.pr.inv: View Inventory
            m3p.f.pr.act: View Game Activity
            m3p.f.ar.pro: View Alliance Profile
            openid: Connect
            offline: Persist Access Until Revoked
      description: |
        You can test this flow with the provided `test-docs` client id. You can also test it with your own SPA client id if you register the redirect to `/beta/oauth-receiver.html`.
    AccessTokenCSB:
      type: oauth2
      flows:
        authorizationCode:
          x-default-scopes:
            - m3p.f.pr.pro
            - m3p.f.pr.ros
            - m3p.f.pr.inv
            - m3p.f.pr.act
            - m3p.f.ar.pro
          authorizationUrl: 'https://hydra-public.prod.m3.scopelypv.com/oauth2/auth'
          tokenUrl: 'https://hydra-public.prod.m3.scopelypv.com/oauth2/token'
          scopes:
            m3p.f.pr.pro: View Profile
            m3p.f.pr.ros: View Roster
            m3p.f.pr.inv: View Inventory
            m3p.f.pr.act: View Game Activity
            m3p.f.ar.pro: View Alliance Profile
            openid: Connect
            offline: Persist Access Until Revoked
        clientCredentials:
          tokenUrl: 'https://hydra-public.prod.m3.scopelypv.com/oauth2/token'
      description: |
        You can test these flows with your own Server-Side App client id. For the Authorization Code Flow you'll need to register the redirect to `/beta/oauth-receiver.html`.
    http-basic:
      type: http
      scheme: basic
      description: This is only used for the `gatedRefresh` route if the refresh token being used comes from a server-side app. The username is your client id. The password is your client secret.
  responses:
    344_UNCHANGED:
      description: 344 `UNCHANGED`
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InfoCodeResponse'
          examples:
            example-1:
              value:
                error:
                  code: 344
                  subcode: UNCHANGED
                  message: Unchanged
                meta:
                  version: 1
                  hashes:
                    events: string
                    drops: string
                    locs: string
                    nodes: string
                    chars: string
                    other: string
                    all: string
    404_NOT_FOUND:
      description: 404 `NOT_FOUND`
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            example-1:
              value:
                error:
                  code: 404
                  subcode: NOT_FOUND
                  message: Not Found
                  field: episodicType
                meta:
                  version: 1
                  hashes:
                    events: string
                    drops: string
                    locs: string
                    nodes: string
                    chars: string
                    other: string
                    all: string
    422_PROHIBITED_VALUE:
      description: 422 `PROHIBITED_VALUE`
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            example-1:
              value:
                error:
                  code: 422
                  subcode: PROHIBITED_VALUE
                  message: Prohibited Value (alone or in combination with other values)
                  field: gearTier
                meta:
                  version: 1
                  hashes:
                    events: string
                    drops: string
                    locs: string
                    nodes: string
                    chars: string
                    other: string
                    all: string
    472_RESPONSE_TOO_LARGE:
      description: 472 `RESPONSE_TOO_LARGE`
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            example-1:
              value:
                error:
                  code: 472
                  subcode: RESPONSE_TOO_LARGE
                  message: Response Too Large
                  length: 654321
                  maxLength: 472000
                meta:
                  version: 1
                  hashes:
                    events: string
                    drops: string
                    locs: string
                    nodes: string
                    chars: string
                    other: string
                    all: string
    474_BANNED:
      description: 474 `BANNED`
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            example-1:
              value:
                error:
                  code: 474
                  subcode: BANNED
                  message: Banned
                meta:
                  version: 1
                  hashes:
                    events: string
                    drops: string
                    locs: string
                    nodes: string
                    chars: string
                    other: string
                    all: string
    500_INTERNAL_SERVER_ERROR:
      description: 500 `INTERNAL_SERVER_ERROR`
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            example-1:
              value:
                error:
                  code: 500
                  subcode: INTERNAL_SERVER_ERROR
                  message: Internal Server Error
    552_RESTARTING:
      description: 552 `RESTARTING`
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            example-1:
              value:
                error:
                  code: 552
                  subcode: RESTARTING
                  message: Restarting
    553_MAINTENANCE:
      description: 553 `MAINTENANCE`
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            example-1:
              value:
                error:
                  code: 553
                  subcode: MAINTENANCE
                  message: Maintenance
security:
  - APIKey: []
    AccessTokenSPA: []
  - APIKey: []
    AccessTokenCSB: []
tags:
  - name: Localization
  - name: Globals
  - name: Analysis
  - name: Characters
  - name: Characters (Shortcuts)
  - name: Items
  - name: Combat
  - name: Events
  - name: Time Heist
  - name: Scopes
  - name: 'Player (m3p.{any})'
  - name: Player (m3p.f.pr.pro)
  - name: Player (m3p.f.pr.ros)
  - name: Player (m3p.f.pr.inv)
  - name: Player (m3p.f.pr.act)
  - name: Player (m3p.f.ar.pro)
  - name: Player (m3p.f.ar.ros)
  - name: Player (m3p.f.ar.inv)
  - name: Player (m3p.f.ar.raid)
  - name: Player (m3p.f.ar.war)
  - name: Player (m3p.f.ar.act)
  - name: Util
